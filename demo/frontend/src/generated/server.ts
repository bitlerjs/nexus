/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Vessel IMO identifier
 */
export type Imo = number;
/**
 * List of dates to evaluate speed loss for
 */
export type Dates = string[];
/**
 * Vessel IMO identifier
 */
export type Imo1 = number;
/**
 * Power at which the speed loss is evaluated
 */
export type EvaluatedAtPower = number;
/**
 * Date at which the speed loss is evaluated
 */
export type Date = string;
/**
 * Speed loss in knots
 */
export type SpeedLoss = number | null;
/**
 * Speed loss in percentage when compared to the sea trial speed
 */
export type SpeedLossPercentage = number | null;
/**
 * List of speed loss evaluations for each date
 */
export type SpeedLossData = SeaTrialBenchmarkSpeedLossTimestampResponse[];

export interface ServerSpecs {
  tasks: {
    "todo.create": {
      input: {
        title: string;
        description?: string;
      };
      output: {
        id: string;
        title: string;
        description?: string;
        createdAt: string;
        updatedAt: string;
        deletedAt?: string;
        completedAt?: string;
      };
    };
    "todo.update": {
      input: {
        id: string;
        title?: string;
        description?: string | null;
        deletedAt?: string | null;
        completedAt?: string | null;
      };
      output: {
        id: string;
        title: string;
        description?: string;
        createdAt: string;
        updatedAt: string;
        deletedAt?: string;
        completedAt?: string;
      };
    };
    "todo.delete": {
      input: {
        ids: string[];
      };
      output: {
        success: boolean;
      };
    };
    "todo.list": {
      input: {
        text?: string;
        completed?: boolean;
        offset?: number;
        limit?: number;
      };
      output: {
        id: string;
        title: string;
        description?: string;
        createdAt: string;
        updatedAt: string;
        deletedAt?: string;
        completedAt?: string;
        distance?: number;
      }[];
    };
    "typescript.execute": {
      input: {
        /**
         * TypeScript code to execute in esm format (use export default to return a value)
         */
        code: string;
        allowModules?: string[];
      };
      output: {
        result: unknown;
      };
    };
    "typescript.add-module": {
      input: {
        id: string;
        name?: string;
        description?: string;
        code: string;
        allowModules?: string[];
      };
      output: {
        success: boolean;
      };
    };
    "typescript.list-modules": {
      input: {};
      output: string[];
    };
    "llm.list-models": {
      input: {};
      output: {
        kind: string;
        name: string;
        provider: string;
      }[];
    };
    "llm.completion": {
      input: {
        systemPrompt?: string;
        model?: string;
        prompt: string;
        dialog?: {
          role: "user" | "assistant" | "system";
          content: string;
        }[];
        tasks?: string[];
        schema?: unknown;
        maxTokens?: number;
        temperature?: number;
      };
      output: {
        type: string;
        content: unknown;
        toolsUsed?: {
          kind: string;
          input: unknown;
          output?: unknown;
          error?: string;
        }[];
      };
    };
    "api.api-portal.post./fuel-model-external-api/simplified/v1/speed-loss/sea-trial-benchmark/calm-water": {
      input: {
        body: SeaTrialBenchmarkSpeedLossRequest;
      };
      output: SeaTrialBenchmarkSpeedLossResponse;
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/bunker-operations/by-id/{id}": {
      input: {
        path: {
          id: string;
        };
      };
      output: BunkerEvent;
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/bunker-operations/by-range": {
      input: {
        query: {
          imo: number;
          from: string;
          to?: string;
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: BunkerEvent1[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/bunker-operations/by-updated-range": {
      input: {
        query: {
          imo?: number;
          from: string;
          to?: string;
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: BunkerEvent2[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/cargo-operations/by-id/{id}": {
      input: {
        path: {
          id: string;
        };
      };
      output: CargoEvent;
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/cargo-operations/by-range": {
      input: {
        query: {
          imo: number;
          from: string;
          to?: string;
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: CargoEvent1[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/cargo-operations/by-update-range": {
      input: {
        query: {
          imo?: number;
          from: string;
          to?: string;
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: CargoEvent2[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/hull-events/by-id/{id}": {
      input: {
        path: {
          id: string;
        };
      };
      output: HullEvent;
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/hull-events/by-ids": {
      input: {
        query: {
          ids: string[];
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: HullEvent1[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/hull-events/by-range": {
      input: {
        query: {
          imo: number;
          from: string;
          to?: string;
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: HullEvent2[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/hull-events/by-updated-range": {
      input: {
        query: {
          imo: number;
          from: string;
          to?: string;
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: HullEvent3[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/statement-of-facts/by-id/{id}": {
      input: {
        path: {
          id: string;
        };
      };
      output: StatementOfFacts;
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/statement-of-facts/by-ids": {
      input: {
        query: {
          ids: string[];
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: StatementOfFacts1[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/statement-of-facts/by-range": {
      input: {
        query: {
          imo: number;
          from: string;
          to?: string;
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: StatementOfFacts2[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/statement-of-facts/by-updated-range": {
      input: {
        query: {
          imo?: number;
          from: string;
          to?: string;
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: StatementOfFacts3[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/noon-reports/by-id/{id}": {
      input: {
        path: {
          id: string;
        };
      };
      output: NoonReport;
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/noon-reports/by-ids": {
      input: {
        query: {
          ids: string[];
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: NoonReport1[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/noon-reports/by-range": {
      input: {
        query: {
          imo: number;
          from: string;
          to?: string;
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: NoonReport2[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/noon-reports/by-updated-range": {
      input: {
        query: {
          imo?: number;
          from: string;
          to?: string;
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: NoonReport3[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/historical/by-id/{id}": {
      input: {
        path: {
          id: string;
        };
      };
      output: HistoricalReport;
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/historical/by-updated-range": {
      input: {
        query: {
          imo?: number;
          from: string;
          to?: string;
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: HistoricalReport1[];
      };
    };
    "api.api-portal.get./vessel-reports-customer-api/v1/reporting-vessels": {
      input: {
        query: {
          from: string;
          to: string;
          cursor?: string;
        };
      };
      output: {
        /**
         * Cursor to fetch the next page of items
         */
        nextCursor?: string;
        items: ReportingVessel[];
      };
    };
    "linear.get-by-id": {
      input: {
        id: string;
      };
      output: {
        id: string;
        title: string;
        storyPoints?: number;
        /**
         * The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
         */
        priority?: number;
        state?: {
          id: string;
          name: string;
        };
        assignee?: {
          id: string;
          name: string;
          email: string;
          displayName: string;
        };
        creator?: {
          id: string;
          name: string;
          email: string;
          displayName: string;
        };
        startedAt?: string;
        completedAt?: string;
        canceledAt?: string;
        description?: string;
      };
    };
    "linear.assigned-issues": {
      input: {};
      output: {
        id: string;
        title: string;
        storyPoints?: number;
        /**
         * The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
         */
        priority?: number;
        state?: {
          id: string;
          name: string;
        };
        assignee?: {
          id: string;
          name: string;
          email: string;
          displayName: string;
        };
        creator?: {
          id: string;
          name: string;
          email: string;
          displayName: string;
        };
        startedAt?: string;
        completedAt?: string;
        canceledAt?: string;
        description?: string;
      }[];
    };
    "linear.get-issues-sprint": {
      input: {
        teamId: string;
      };
      output: {
        id: string;
        title: string;
        storyPoints?: number;
        /**
         * The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
         */
        priority?: number;
        state?: {
          id: string;
          name: string;
        };
        assignee?: {
          id: string;
          name: string;
          email: string;
          displayName: string;
        };
        creator?: {
          id: string;
          name: string;
          email: string;
          displayName: string;
        };
        startedAt?: string;
        completedAt?: string;
        canceledAt?: string;
        description?: string;
      }[];
    };
    "linear.who-am-i": {
      input: {};
      output: {
        id: string;
        name: string;
        email: string;
        displayName: string;
        teams: {
          id: string;
          name: string;
        }[];
      };
    };
    "vessel-particulars.get-vessel-data": {
      input: {
        imo: string;
        /**
         * Don't remove null values from the response. Useful for seing which data is not available, but creates a larger payload
         */
        preserveNulls?: boolean;
      };
      output: unknown;
    };
    "weather-routing.generate-route": {
      input: {
        imo: number;
        origin: {
          latitude: number;
          longitude: number;
        };
        destination: {
          latitude: number;
          longitude: number;
        };
        viaPoints?: {
          latitude: number;
          longitude: number;
        }[];
        draft: number;
        marketRate: number;
        bunkerPrices: {
          insideSeca: number;
          outsideSeca: number;
        };
      };
      output: unknown;
    };
  };
  events: {
    "todo.updated": {
      input: {
        ids?: number[];
      };
      output: {
        id: string;
        title: string;
        description?: string;
        createdAt: string;
        updatedAt: string;
        deletedAt?: string;
        completedAt?: string;
      };
    };
  };
  sources: {};
  entities: {};
}
export interface SeaTrialBenchmarkSpeedLossRequest {
  imo: Imo;
  dates: Dates;
}
export interface SeaTrialBenchmarkSpeedLossResponse {
  imo: Imo1;
  evaluated_at_power: EvaluatedAtPower;
  speed_loss_data: SpeedLossData;
}
export interface SeaTrialBenchmarkSpeedLossTimestampResponse {
  date: Date;
  speed_loss: SpeedLoss;
  speed_loss_percentage: SpeedLossPercentage;
}
export interface BunkerEvent {
  /**
   * The type of bunker event
   */
  type:
    | (
        | "bunker-stock"
        | "bunker"
        | "debunker"
        | "fresh-water-bunker"
        | "fresh-water-stock"
        | "lube-oil-bunker"
        | "lube-oil-stock"
      )
    | string;
  port?: Port;
  bunkers: BunkerEventBunker[];
  lubricants: BunkerEventLubricants[];
  other_stores: BunkerEventOtherStores[];
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface Port {
  /**
   * Port ID
   */
  id: string;
  /**
   * Port name
   */
  name: string;
  /**
   * Country code of the port
   */
  country_code: string;
  /**
   * UN/LOCODE of the port
   */
  unlocode?: string;
  /**
   * Is the port in port limits (regulation)
   */
  in_port_limits?: boolean;
  location: Location;
  [k: string]: unknown;
}
export interface Location {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface BunkerEventBunker {
  tank?: Tank;
  bunker_grade: Bunker;
  /**
   * The amount of bunker (mt)
   */
  bunkered?: number;
  /**
   * The amount of bunker (mt)
   */
  debunkered?: number;
  /**
   * The amount of bunker (mt)
   */
  remaining?: number;
  bunker_event_details?: BunkerEventBunkerDetails;
}
export interface Tank {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Bunker {
  /**
   * Fuel grade
   */
  fuel_grade: ("hsfo" | "vlsfo" | "mgo" | "lng") | string;
  details?: BunkerDetails;
  [k: string]: unknown;
}
/**
 * Details of the fuel grade, properties based on type
 */
export interface BunkerDetails {
  /**
   * %
   */
  sulphur?: number;
  /**
   * kg/m3
   */
  density?: number;
  /**
   * cSt
   */
  viscosity?: number;
  /**
   * Lower calorific value (MJ/kg)
   */
  lower_calorific_value?: number;
  /**
   * Percentage of biofuel (%)
   */
  percentage_of_bio?: number;
  /**
   * CO2 conversion factor (kg CO2/kg fuel)
   */
  co2_conversion_factor?: number;
  /**
   * Temperature of the flash point (°C)
   */
  flash_point?: number;
  /**
   * Deep tank ROB (mt)
   */
  deepTankROB?: number;
  /**
   * Settling tank ROB (mt)
   */
  settlingTankROB?: number;
  /**
   * Service tank ROB (mt)
   */
  serviceTankROB?: number;
  /**
   * Overflow tank ROB (mt)
   */
  overflowTankROB?: number;
  origin?: BunkerDetailsOrigin;
  [k: string]: unknown;
}
export interface BunkerDetailsOrigin {
  /**
   * Unique batch ID
   */
  batch_id?: string;
  /**
   * Provider of the fuel
   */
  provider?: string;
  [k: string]: unknown;
}
export interface BunkerEventBunkerDetails {
  survey?: Survey;
  /**
   * The temperature of the fuel (°C)
   */
  fuel_temperature?: number;
  /**
   * Whether the bunker delivery note was received
   */
  bunker_delivery_note_received?: boolean;
  /**
   * Whether the bunker quantity survey was performed
   */
  bunker_quantity_survey?: boolean;
}
export interface Survey {
  /**
   * Difference in quantity between expected and actual (negative for gain) (mt)
   */
  loss: number;
  /**
   * Reason for loss if any
   */
  loss_reason?: string;
  /**
   * Is the survey of the remaining done using sounding
   */
  sounding: boolean;
  [k: string]: unknown;
}
export interface BunkerEventLubricants {
  tank: Tank1;
  lubricant_grade: Lubricant;
  /**
   * Bunkered quantity (L)
   */
  bunkered?: number;
  /**
   * Debunkered quantity (L)
   */
  debunkered?: number;
  /**
   * Remaining quantity (L)
   */
  remaining?: number;
  details?: BunkerEventLubricantsDetails;
}
export interface Tank1 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Lubricant {
  /**
   * The type of lubricant
   */
  lubricant_type:
    | ("me-lube-oil" | "ae-lube-oil" | "cylinder-oil" | "high-bn-cylinder-oil" | "low-bn-cylinder-oil")
    | string;
  /**
   * The base number of the lubricant
   */
  base_number?: number;
  /**
   * The density of the lubricant (kg/m3)
   */
  density?: number;
  /**
   * The viscosity of the lubricant (cSt)
   */
  viscosity?: number;
  [k: string]: unknown;
}
export interface BunkerEventLubricantsDetails {
  survey?: Survey1;
  /**
   * The temperature of the lubricant (°C)
   */
  temperature?: number;
}
export interface Survey1 {
  /**
   * Difference in quantity between expected and actual (negative for gain) (mt)
   */
  loss: number;
  /**
   * Reason for loss if any
   */
  loss_reason?: string;
  /**
   * Is the survey of the remaining done using sounding
   */
  sounding: boolean;
  [k: string]: unknown;
}
export interface BunkerEventOtherStores {
  tank: Tank2;
  type: ("fresh_water" | "ballast_water" | "grey_water" | "sludge" | "slops") | string;
  /**
   * Quantity added (received, produced, etc) (mt)
   */
  in?: number;
  /**
   * Quantity disposed (consumed, discharged, etc) (mt)
   */
  out?: number;
  /**
   * Quantity remaining (mt)
   */
  remaining?: number;
  details: BunkerEventOtherStoresDetails;
}
export interface Tank2 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface BunkerEventOtherStoresDetails {
  survey: Survey2;
  /**
   * Quantity produced (mt)
   */
  produced?: number;
  /**
   * Quantity consumed (mt)
   */
  consumed?: number;
  /**
   * Quantity received (mt)
   */
  received?: number;
  /**
   * Quantity discharged (mt)
   */
  discharged?: number;
  /**
   * Quantity incinerated (mt)
   */
  incinerated?: number;
}
export interface Survey2 {
  /**
   * Difference in quantity between expected and actual (negative for gain) (mt)
   */
  loss: number;
  /**
   * Reason for loss if any
   */
  loss_reason?: string;
  /**
   * Is the survey of the remaining done using sounding
   */
  sounding: boolean;
  [k: string]: unknown;
}
export interface BunkerEvent1 {
  /**
   * The type of bunker event
   */
  type:
    | (
        | "bunker-stock"
        | "bunker"
        | "debunker"
        | "fresh-water-bunker"
        | "fresh-water-stock"
        | "lube-oil-bunker"
        | "lube-oil-stock"
      )
    | string;
  port?: Port1;
  bunkers: BunkerEventBunker1[];
  lubricants: BunkerEventLubricants1[];
  other_stores: BunkerEventOtherStores1[];
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface Port1 {
  /**
   * Port ID
   */
  id: string;
  /**
   * Port name
   */
  name: string;
  /**
   * Country code of the port
   */
  country_code: string;
  /**
   * UN/LOCODE of the port
   */
  unlocode?: string;
  /**
   * Is the port in port limits (regulation)
   */
  in_port_limits?: boolean;
  location: Location1;
  [k: string]: unknown;
}
export interface Location1 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface BunkerEventBunker1 {
  tank?: Tank3;
  bunker_grade: Bunker1;
  /**
   * The amount of bunker (mt)
   */
  bunkered?: number;
  /**
   * The amount of bunker (mt)
   */
  debunkered?: number;
  /**
   * The amount of bunker (mt)
   */
  remaining?: number;
  bunker_event_details?: BunkerEventBunkerDetails1;
}
export interface Tank3 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Bunker1 {
  /**
   * Fuel grade
   */
  fuel_grade: ("hsfo" | "vlsfo" | "mgo" | "lng") | string;
  details?: BunkerDetails1;
  [k: string]: unknown;
}
/**
 * Details of the fuel grade, properties based on type
 */
export interface BunkerDetails1 {
  /**
   * %
   */
  sulphur?: number;
  /**
   * kg/m3
   */
  density?: number;
  /**
   * cSt
   */
  viscosity?: number;
  /**
   * Lower calorific value (MJ/kg)
   */
  lower_calorific_value?: number;
  /**
   * Percentage of biofuel (%)
   */
  percentage_of_bio?: number;
  /**
   * CO2 conversion factor (kg CO2/kg fuel)
   */
  co2_conversion_factor?: number;
  /**
   * Temperature of the flash point (°C)
   */
  flash_point?: number;
  /**
   * Deep tank ROB (mt)
   */
  deepTankROB?: number;
  /**
   * Settling tank ROB (mt)
   */
  settlingTankROB?: number;
  /**
   * Service tank ROB (mt)
   */
  serviceTankROB?: number;
  /**
   * Overflow tank ROB (mt)
   */
  overflowTankROB?: number;
  origin?: BunkerDetailsOrigin1;
  [k: string]: unknown;
}
export interface BunkerDetailsOrigin1 {
  /**
   * Unique batch ID
   */
  batch_id?: string;
  /**
   * Provider of the fuel
   */
  provider?: string;
  [k: string]: unknown;
}
export interface BunkerEventBunkerDetails1 {
  survey?: Survey3;
  /**
   * The temperature of the fuel (°C)
   */
  fuel_temperature?: number;
  /**
   * Whether the bunker delivery note was received
   */
  bunker_delivery_note_received?: boolean;
  /**
   * Whether the bunker quantity survey was performed
   */
  bunker_quantity_survey?: boolean;
}
export interface Survey3 {
  /**
   * Difference in quantity between expected and actual (negative for gain) (mt)
   */
  loss: number;
  /**
   * Reason for loss if any
   */
  loss_reason?: string;
  /**
   * Is the survey of the remaining done using sounding
   */
  sounding: boolean;
  [k: string]: unknown;
}
export interface BunkerEventLubricants1 {
  tank: Tank4;
  lubricant_grade: Lubricant1;
  /**
   * Bunkered quantity (L)
   */
  bunkered?: number;
  /**
   * Debunkered quantity (L)
   */
  debunkered?: number;
  /**
   * Remaining quantity (L)
   */
  remaining?: number;
  details?: BunkerEventLubricantsDetails1;
}
export interface Tank4 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Lubricant1 {
  /**
   * The type of lubricant
   */
  lubricant_type:
    | ("me-lube-oil" | "ae-lube-oil" | "cylinder-oil" | "high-bn-cylinder-oil" | "low-bn-cylinder-oil")
    | string;
  /**
   * The base number of the lubricant
   */
  base_number?: number;
  /**
   * The density of the lubricant (kg/m3)
   */
  density?: number;
  /**
   * The viscosity of the lubricant (cSt)
   */
  viscosity?: number;
  [k: string]: unknown;
}
export interface BunkerEventLubricantsDetails1 {
  survey?: Survey4;
  /**
   * The temperature of the lubricant (°C)
   */
  temperature?: number;
}
export interface Survey4 {
  /**
   * Difference in quantity between expected and actual (negative for gain) (mt)
   */
  loss: number;
  /**
   * Reason for loss if any
   */
  loss_reason?: string;
  /**
   * Is the survey of the remaining done using sounding
   */
  sounding: boolean;
  [k: string]: unknown;
}
export interface BunkerEventOtherStores1 {
  tank: Tank5;
  type: ("fresh_water" | "ballast_water" | "grey_water" | "sludge" | "slops") | string;
  /**
   * Quantity added (received, produced, etc) (mt)
   */
  in?: number;
  /**
   * Quantity disposed (consumed, discharged, etc) (mt)
   */
  out?: number;
  /**
   * Quantity remaining (mt)
   */
  remaining?: number;
  details: BunkerEventOtherStoresDetails1;
}
export interface Tank5 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface BunkerEventOtherStoresDetails1 {
  survey: Survey5;
  /**
   * Quantity produced (mt)
   */
  produced?: number;
  /**
   * Quantity consumed (mt)
   */
  consumed?: number;
  /**
   * Quantity received (mt)
   */
  received?: number;
  /**
   * Quantity discharged (mt)
   */
  discharged?: number;
  /**
   * Quantity incinerated (mt)
   */
  incinerated?: number;
}
export interface Survey5 {
  /**
   * Difference in quantity between expected and actual (negative for gain) (mt)
   */
  loss: number;
  /**
   * Reason for loss if any
   */
  loss_reason?: string;
  /**
   * Is the survey of the remaining done using sounding
   */
  sounding: boolean;
  [k: string]: unknown;
}
export interface BunkerEvent2 {
  /**
   * The type of bunker event
   */
  type:
    | (
        | "bunker-stock"
        | "bunker"
        | "debunker"
        | "fresh-water-bunker"
        | "fresh-water-stock"
        | "lube-oil-bunker"
        | "lube-oil-stock"
      )
    | string;
  port?: Port2;
  bunkers: BunkerEventBunker2[];
  lubricants: BunkerEventLubricants2[];
  other_stores: BunkerEventOtherStores2[];
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface Port2 {
  /**
   * Port ID
   */
  id: string;
  /**
   * Port name
   */
  name: string;
  /**
   * Country code of the port
   */
  country_code: string;
  /**
   * UN/LOCODE of the port
   */
  unlocode?: string;
  /**
   * Is the port in port limits (regulation)
   */
  in_port_limits?: boolean;
  location: Location2;
  [k: string]: unknown;
}
export interface Location2 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface BunkerEventBunker2 {
  tank?: Tank6;
  bunker_grade: Bunker2;
  /**
   * The amount of bunker (mt)
   */
  bunkered?: number;
  /**
   * The amount of bunker (mt)
   */
  debunkered?: number;
  /**
   * The amount of bunker (mt)
   */
  remaining?: number;
  bunker_event_details?: BunkerEventBunkerDetails2;
}
export interface Tank6 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Bunker2 {
  /**
   * Fuel grade
   */
  fuel_grade: ("hsfo" | "vlsfo" | "mgo" | "lng") | string;
  details?: BunkerDetails2;
  [k: string]: unknown;
}
/**
 * Details of the fuel grade, properties based on type
 */
export interface BunkerDetails2 {
  /**
   * %
   */
  sulphur?: number;
  /**
   * kg/m3
   */
  density?: number;
  /**
   * cSt
   */
  viscosity?: number;
  /**
   * Lower calorific value (MJ/kg)
   */
  lower_calorific_value?: number;
  /**
   * Percentage of biofuel (%)
   */
  percentage_of_bio?: number;
  /**
   * CO2 conversion factor (kg CO2/kg fuel)
   */
  co2_conversion_factor?: number;
  /**
   * Temperature of the flash point (°C)
   */
  flash_point?: number;
  /**
   * Deep tank ROB (mt)
   */
  deepTankROB?: number;
  /**
   * Settling tank ROB (mt)
   */
  settlingTankROB?: number;
  /**
   * Service tank ROB (mt)
   */
  serviceTankROB?: number;
  /**
   * Overflow tank ROB (mt)
   */
  overflowTankROB?: number;
  origin?: BunkerDetailsOrigin2;
  [k: string]: unknown;
}
export interface BunkerDetailsOrigin2 {
  /**
   * Unique batch ID
   */
  batch_id?: string;
  /**
   * Provider of the fuel
   */
  provider?: string;
  [k: string]: unknown;
}
export interface BunkerEventBunkerDetails2 {
  survey?: Survey6;
  /**
   * The temperature of the fuel (°C)
   */
  fuel_temperature?: number;
  /**
   * Whether the bunker delivery note was received
   */
  bunker_delivery_note_received?: boolean;
  /**
   * Whether the bunker quantity survey was performed
   */
  bunker_quantity_survey?: boolean;
}
export interface Survey6 {
  /**
   * Difference in quantity between expected and actual (negative for gain) (mt)
   */
  loss: number;
  /**
   * Reason for loss if any
   */
  loss_reason?: string;
  /**
   * Is the survey of the remaining done using sounding
   */
  sounding: boolean;
  [k: string]: unknown;
}
export interface BunkerEventLubricants2 {
  tank: Tank7;
  lubricant_grade: Lubricant2;
  /**
   * Bunkered quantity (L)
   */
  bunkered?: number;
  /**
   * Debunkered quantity (L)
   */
  debunkered?: number;
  /**
   * Remaining quantity (L)
   */
  remaining?: number;
  details?: BunkerEventLubricantsDetails2;
}
export interface Tank7 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Lubricant2 {
  /**
   * The type of lubricant
   */
  lubricant_type:
    | ("me-lube-oil" | "ae-lube-oil" | "cylinder-oil" | "high-bn-cylinder-oil" | "low-bn-cylinder-oil")
    | string;
  /**
   * The base number of the lubricant
   */
  base_number?: number;
  /**
   * The density of the lubricant (kg/m3)
   */
  density?: number;
  /**
   * The viscosity of the lubricant (cSt)
   */
  viscosity?: number;
  [k: string]: unknown;
}
export interface BunkerEventLubricantsDetails2 {
  survey?: Survey7;
  /**
   * The temperature of the lubricant (°C)
   */
  temperature?: number;
}
export interface Survey7 {
  /**
   * Difference in quantity between expected and actual (negative for gain) (mt)
   */
  loss: number;
  /**
   * Reason for loss if any
   */
  loss_reason?: string;
  /**
   * Is the survey of the remaining done using sounding
   */
  sounding: boolean;
  [k: string]: unknown;
}
export interface BunkerEventOtherStores2 {
  tank: Tank8;
  type: ("fresh_water" | "ballast_water" | "grey_water" | "sludge" | "slops") | string;
  /**
   * Quantity added (received, produced, etc) (mt)
   */
  in?: number;
  /**
   * Quantity disposed (consumed, discharged, etc) (mt)
   */
  out?: number;
  /**
   * Quantity remaining (mt)
   */
  remaining?: number;
  details: BunkerEventOtherStoresDetails2;
}
export interface Tank8 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface BunkerEventOtherStoresDetails2 {
  survey: Survey8;
  /**
   * Quantity produced (mt)
   */
  produced?: number;
  /**
   * Quantity consumed (mt)
   */
  consumed?: number;
  /**
   * Quantity received (mt)
   */
  received?: number;
  /**
   * Quantity discharged (mt)
   */
  discharged?: number;
  /**
   * Quantity incinerated (mt)
   */
  incinerated?: number;
}
export interface Survey8 {
  /**
   * Difference in quantity between expected and actual (negative for gain) (mt)
   */
  loss: number;
  /**
   * Reason for loss if any
   */
  loss_reason?: string;
  /**
   * Is the survey of the remaining done using sounding
   */
  sounding: boolean;
  [k: string]: unknown;
}
export interface CargoEvent {
  cargo: CargoEventCargo;
  activities: CargoActivity[];
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface CargoEventCargo {
  operations: CargoOperation[];
  /**
   * Total cargo weight on board (mt)
   */
  total_cargo_weight_on_board: number;
  [k: string]: unknown;
}
export interface CargoOperation {
  /**
   * Type of cargo operation
   */
  type: ("discharging" | "loading") | string;
  cargo: Cargo;
  /**
   * Cargo weight transferred during the operation (mt)
   */
  cargo_weight: number;
  cargo_operation_details: CargoOperationDetails;
  [k: string]: unknown;
}
export interface Cargo {
  /**
   * unique Id to be able to follow cargo
   */
  id: string;
  /**
   * Name of the cargo
   */
  name?: string;
  /**
   * Type of the cargo
   */
  type?: ("crude_oil" | "lng" | "lpg" | "chemicals" | "dry_bulk" | "container") | string;
  characteristics?: CargoCharacteristics;
  [k: string]: unknown;
}
export interface CargoCharacteristics {
  /**
   * Grade of the cargo
   */
  grade?: string;
  /**
   * Density of the cargo (kg/m3)
   */
  density?: number;
  /**
   * Viscosity of the cargo (cSt)
   */
  viscosity?: number;
  /**
   * Does the cargo require to be heated or not
   */
  heated_cargo?: boolean;
  [k: string]: unknown;
}
export interface CargoOperationDetails {
  /**
   * The average transfer rate of the operation (m3/h)
   */
  average_transfer_rate?: number;
  /**
   * The maximum cargo rate required by the terminal (m3/h)
   */
  max_cargo_rate_req_by_terminal_volume?: number;
  /**
   * The temperature of the cargo at the manifold (°C)
   */
  cargo_temp_at_manifold?: number;
  /**
   * The average manifold pressure (bars)
   */
  average_manifold_pressure?: number;
  /**
   * Whether a letter of protest was issued
   */
  letter_of_protest_issued?: boolean;
  /**
   * Whether a letter of protest was received
   */
  letter_of_protest_received?: boolean;
  cargo_tanks: CargoTank[];
  [k: string]: unknown;
}
export interface CargoTank {
  /**
   * The id of the cargo tank
   */
  id: string;
  /**
   * The name of the cargo tank
   */
  custom_name: string;
  /**
   * The canonical name of the cargo tank
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface CargoActivity {
  /**
   * The type of cargo activity
   */
  type: ("ballasting" | "cargo_heating" | "cargo_recirculation" | "tank_cleaning" | "tank_cleaning_option") | string;
  /**
   * The duration of the activity (hours)
   */
  duration: number;
  /**
   * The value of the activity
   */
  value?: string;
  [k: string]: unknown;
}
export interface CargoEvent1 {
  cargo: CargoEventCargo1;
  activities: CargoActivity1[];
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface CargoEventCargo1 {
  operations: CargoOperation1[];
  /**
   * Total cargo weight on board (mt)
   */
  total_cargo_weight_on_board: number;
  [k: string]: unknown;
}
export interface CargoOperation1 {
  /**
   * Type of cargo operation
   */
  type: ("discharging" | "loading") | string;
  cargo: Cargo1;
  /**
   * Cargo weight transferred during the operation (mt)
   */
  cargo_weight: number;
  cargo_operation_details: CargoOperationDetails1;
  [k: string]: unknown;
}
export interface Cargo1 {
  /**
   * unique Id to be able to follow cargo
   */
  id: string;
  /**
   * Name of the cargo
   */
  name?: string;
  /**
   * Type of the cargo
   */
  type?: ("crude_oil" | "lng" | "lpg" | "chemicals" | "dry_bulk" | "container") | string;
  characteristics?: CargoCharacteristics1;
  [k: string]: unknown;
}
export interface CargoCharacteristics1 {
  /**
   * Grade of the cargo
   */
  grade?: string;
  /**
   * Density of the cargo (kg/m3)
   */
  density?: number;
  /**
   * Viscosity of the cargo (cSt)
   */
  viscosity?: number;
  /**
   * Does the cargo require to be heated or not
   */
  heated_cargo?: boolean;
  [k: string]: unknown;
}
export interface CargoOperationDetails1 {
  /**
   * The average transfer rate of the operation (m3/h)
   */
  average_transfer_rate?: number;
  /**
   * The maximum cargo rate required by the terminal (m3/h)
   */
  max_cargo_rate_req_by_terminal_volume?: number;
  /**
   * The temperature of the cargo at the manifold (°C)
   */
  cargo_temp_at_manifold?: number;
  /**
   * The average manifold pressure (bars)
   */
  average_manifold_pressure?: number;
  /**
   * Whether a letter of protest was issued
   */
  letter_of_protest_issued?: boolean;
  /**
   * Whether a letter of protest was received
   */
  letter_of_protest_received?: boolean;
  cargo_tanks: CargoTank1[];
  [k: string]: unknown;
}
export interface CargoTank1 {
  /**
   * The id of the cargo tank
   */
  id: string;
  /**
   * The name of the cargo tank
   */
  custom_name: string;
  /**
   * The canonical name of the cargo tank
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface CargoActivity1 {
  /**
   * The type of cargo activity
   */
  type: ("ballasting" | "cargo_heating" | "cargo_recirculation" | "tank_cleaning" | "tank_cleaning_option") | string;
  /**
   * The duration of the activity (hours)
   */
  duration: number;
  /**
   * The value of the activity
   */
  value?: string;
  [k: string]: unknown;
}
export interface CargoEvent2 {
  cargo: CargoEventCargo2;
  activities: CargoActivity2[];
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface CargoEventCargo2 {
  operations: CargoOperation2[];
  /**
   * Total cargo weight on board (mt)
   */
  total_cargo_weight_on_board: number;
  [k: string]: unknown;
}
export interface CargoOperation2 {
  /**
   * Type of cargo operation
   */
  type: ("discharging" | "loading") | string;
  cargo: Cargo2;
  /**
   * Cargo weight transferred during the operation (mt)
   */
  cargo_weight: number;
  cargo_operation_details: CargoOperationDetails2;
  [k: string]: unknown;
}
export interface Cargo2 {
  /**
   * unique Id to be able to follow cargo
   */
  id: string;
  /**
   * Name of the cargo
   */
  name?: string;
  /**
   * Type of the cargo
   */
  type?: ("crude_oil" | "lng" | "lpg" | "chemicals" | "dry_bulk" | "container") | string;
  characteristics?: CargoCharacteristics2;
  [k: string]: unknown;
}
export interface CargoCharacteristics2 {
  /**
   * Grade of the cargo
   */
  grade?: string;
  /**
   * Density of the cargo (kg/m3)
   */
  density?: number;
  /**
   * Viscosity of the cargo (cSt)
   */
  viscosity?: number;
  /**
   * Does the cargo require to be heated or not
   */
  heated_cargo?: boolean;
  [k: string]: unknown;
}
export interface CargoOperationDetails2 {
  /**
   * The average transfer rate of the operation (m3/h)
   */
  average_transfer_rate?: number;
  /**
   * The maximum cargo rate required by the terminal (m3/h)
   */
  max_cargo_rate_req_by_terminal_volume?: number;
  /**
   * The temperature of the cargo at the manifold (°C)
   */
  cargo_temp_at_manifold?: number;
  /**
   * The average manifold pressure (bars)
   */
  average_manifold_pressure?: number;
  /**
   * Whether a letter of protest was issued
   */
  letter_of_protest_issued?: boolean;
  /**
   * Whether a letter of protest was received
   */
  letter_of_protest_received?: boolean;
  cargo_tanks: CargoTank2[];
  [k: string]: unknown;
}
export interface CargoTank2 {
  /**
   * The id of the cargo tank
   */
  id: string;
  /**
   * The name of the cargo tank
   */
  custom_name: string;
  /**
   * The canonical name of the cargo tank
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface CargoActivity2 {
  /**
   * The type of cargo activity
   */
  type: ("ballasting" | "cargo_heating" | "cargo_recirculation" | "tank_cleaning" | "tank_cleaning_option") | string;
  /**
   * The duration of the activity (hours)
   */
  duration: number;
  /**
   * The value of the activity
   */
  value?: string;
  [k: string]: unknown;
}
export interface HullEvent {
  /**
   * The type of event that occurred
   */
  type:
    | ("full_hull_cleaning" | "partial_hull_cleaning" | "underwater_inspection" | "dry_docking" | "propeller_polishing")
    | string;
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface HullEvent1 {
  /**
   * The type of event that occurred
   */
  type:
    | ("full_hull_cleaning" | "partial_hull_cleaning" | "underwater_inspection" | "dry_docking" | "propeller_polishing")
    | string;
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface HullEvent2 {
  /**
   * The type of event that occurred
   */
  type:
    | ("full_hull_cleaning" | "partial_hull_cleaning" | "underwater_inspection" | "dry_docking" | "propeller_polishing")
    | string;
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface HullEvent3 {
  /**
   * The type of event that occurred
   */
  type:
    | ("full_hull_cleaning" | "partial_hull_cleaning" | "underwater_inspection" | "dry_docking" | "propeller_polishing")
    | string;
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface StatementOfFacts {
  activities: StatementOfFactsActivity[];
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface StatementOfFactsActivity {
  /**
   * The name of the activity
   */
  name: string;
  /**
   * The datetime when the activity occurred
   */
  activity_datetime?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * A remark about the activity
   */
  remark?: string;
  [k: string]: unknown;
}
export interface StatementOfFacts1 {
  activities: StatementOfFactsActivity1[];
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface StatementOfFactsActivity1 {
  /**
   * The name of the activity
   */
  name: string;
  /**
   * The datetime when the activity occurred
   */
  activity_datetime?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * A remark about the activity
   */
  remark?: string;
  [k: string]: unknown;
}
export interface StatementOfFacts2 {
  activities: StatementOfFactsActivity2[];
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface StatementOfFactsActivity2 {
  /**
   * The name of the activity
   */
  name: string;
  /**
   * The datetime when the activity occurred
   */
  activity_datetime?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * A remark about the activity
   */
  remark?: string;
  [k: string]: unknown;
}
export interface StatementOfFacts3 {
  activities: StatementOfFactsActivity3[];
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface StatementOfFactsActivity3 {
  /**
   * The name of the activity
   */
  name: string;
  /**
   * The datetime when the activity occurred
   */
  activity_datetime?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * A remark about the activity
   */
  remark?: string;
  [k: string]: unknown;
}
export interface NoonReport {
  /**
   * The type of event that occurred
   */
  type: ("at_sea" | "in_port" | "arrival" | "departure") | string;
  /**
   * The name of the captain
   */
  captain_name?: string;
  /**
   * The name of the chief engineer
   */
  chief_engineer_name?: string;
  storage: NoonReportStorage;
  operating_conditions: OperatingCondition[];
  machinery: NoonReportMachinery;
  ports: NoonReportPort[];
  weather?: Weather;
  instructions: NoonReportInstruction[];
  navigation: NoonReportNavigation;
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface NoonReportStorage {
  bunkers: NoonReportStorageBunker[];
  cargos: NoonReportStorageCargo[];
  lubricants: NoonReportStorageLubricants[];
  other_stores: NoonReportStorageOther[];
  [k: string]: unknown;
}
export interface NoonReportStorageBunker {
  /**
   * The id of the bunker
   */
  id: string;
  tank?: Tank9;
  bunker: Bunker3;
  /**
   * The amount of bunker remaining (mt)
   */
  remaining?: number;
  [k: string]: unknown;
}
export interface Tank9 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Bunker3 {
  /**
   * Fuel grade
   */
  fuel_grade: ("hsfo" | "vlsfo" | "mgo" | "lng") | string;
  details?: BunkerDetails3;
  [k: string]: unknown;
}
/**
 * Details of the fuel grade, properties based on type
 */
export interface BunkerDetails3 {
  /**
   * %
   */
  sulphur?: number;
  /**
   * kg/m3
   */
  density?: number;
  /**
   * cSt
   */
  viscosity?: number;
  /**
   * Lower calorific value (MJ/kg)
   */
  lower_calorific_value?: number;
  /**
   * Percentage of biofuel (%)
   */
  percentage_of_bio?: number;
  /**
   * CO2 conversion factor (kg CO2/kg fuel)
   */
  co2_conversion_factor?: number;
  /**
   * Temperature of the flash point (°C)
   */
  flash_point?: number;
  /**
   * Deep tank ROB (mt)
   */
  deepTankROB?: number;
  /**
   * Settling tank ROB (mt)
   */
  settlingTankROB?: number;
  /**
   * Service tank ROB (mt)
   */
  serviceTankROB?: number;
  /**
   * Overflow tank ROB (mt)
   */
  overflowTankROB?: number;
  origin?: BunkerDetailsOrigin3;
  [k: string]: unknown;
}
export interface BunkerDetailsOrigin3 {
  /**
   * Unique batch ID
   */
  batch_id?: string;
  /**
   * Provider of the fuel
   */
  provider?: string;
  [k: string]: unknown;
}
export interface NoonReportStorageCargo {
  tank?: Tank10;
  cargo?: Cargo3;
  /**
   * The weight of the cargo (mt)
   */
  cargo_weight?: number;
  cargo_details?: NoonReportStorageCargoDetails;
  [k: string]: unknown;
}
export interface Tank10 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Cargo3 {
  /**
   * unique Id to be able to follow cargo
   */
  id: string;
  /**
   * Name of the cargo
   */
  name?: string;
  /**
   * Type of the cargo
   */
  type?: ("crude_oil" | "lng" | "lpg" | "chemicals" | "dry_bulk" | "container") | string;
  characteristics?: CargoCharacteristics3;
  [k: string]: unknown;
}
export interface CargoCharacteristics3 {
  /**
   * Grade of the cargo
   */
  grade?: string;
  /**
   * Density of the cargo (kg/m3)
   */
  density?: number;
  /**
   * Viscosity of the cargo (cSt)
   */
  viscosity?: number;
  /**
   * Does the cargo require to be heated or not
   */
  heated_cargo?: boolean;
  [k: string]: unknown;
}
export interface NoonReportStorageCargoDetails {
  /**
   * The vapor pressure of the cargo (mmWG)
   */
  vapor_pressure?: number;
  /**
   * The temperature of the cargo (°C)
   */
  liquid_temperature?: number;
  [k: string]: unknown;
}
export interface NoonReportStorageLubricants {
  tank_id: string;
  lubricant_grade?: Lubricant3;
  /**
   * The amount of lubricant consumed (L)
   */
  consumed?: number;
  /**
   * The amount of lubricant remaining (L)
   */
  remaining?: number;
  [k: string]: unknown;
}
export interface Lubricant3 {
  /**
   * The type of lubricant
   */
  lubricant_type:
    | ("me-lube-oil" | "ae-lube-oil" | "cylinder-oil" | "high-bn-cylinder-oil" | "low-bn-cylinder-oil")
    | string;
  /**
   * The base number of the lubricant
   */
  base_number?: number;
  /**
   * The density of the lubricant (kg/m3)
   */
  density?: number;
  /**
   * The viscosity of the lubricant (cSt)
   */
  viscosity?: number;
  [k: string]: unknown;
}
export interface NoonReportStorageOther {
  tank_id: string;
  type:
    | ("fresh_water_distilled" | "fresh_water_drinking" | "fresh_water_cleaning" | "ballast_water" | "sludge" | "slops")
    | string;
  /**
   * Total amount entering the tank (generated or bunkered) (mt)
   */
  in?: number;
  /**
   * Total amount leaving the tank (consumed or discharged) (mt)
   */
  out?: number;
  /**
   * The amount remaining in the tank (mt)
   */
  remaining?: number;
  details?: NoonReportStorageOtherDetails;
  [k: string]: unknown;
}
export interface NoonReportStorageOtherDetails {
  /**
   * The amount produced (mt)
   */
  produced?: number;
  /**
   * The amount consumed (mt)
   */
  consumed?: number;
  /**
   * The amount received (mt)
   */
  received?: number;
  /**
   * The amount discharged (mt)
   */
  discharged?: number;
  /**
   * The amount discharged (m3)
   */
  discharged_m3?: number;
  /**
   * The amount incinerated (mt)
   */
  incinerated?: number;
  /**
   * The amount incinerated (m3)
   */
  incinerated_m3?: number;
  /**
   * The temperature of the liquid (°C)
   */
  liquid_temperature?: number;
  [k: string]: unknown;
}
/**
 * List Operating condition of the vessel over the reporting period (used for regulatory reporting at port)
 */
export interface OperatingCondition {
  /**
   * Operating condition id
   */
  id: string;
  /**
   * The condition of the operating condition
   */
  condition?: string;
  /**
   * The duration of the operating condition (hours)
   */
  duration?: number;
  /**
   * The start datetime of the operating condition
   */
  period_start?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the operating condition
   */
  period_end?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface NoonReportMachinery {
  propellers: Propeller[];
  main_engine: MainEngineMachinery;
  auxiliary_engines: AuxiliaryEngineMachinery;
  boilers: BoilerMachinery;
  other_machinery: MachineryOtherMachinery;
  sub_fuel_consumption_main_engines: SubFuelConsumptionMainEngine[];
  sub_fuel_consumption_auxiliary_engines: SubFuelConsumptionAuxEngine[];
  sub_fuel_consumption_boilers: SubFuelConsumptionBoiler[];
}
export interface Propeller {
  /**
   * The id of the propeller
   */
  id: string;
  /**
   * Propeller distance (nm)
   */
  distance?: number;
  /**
   * Propeller slip (%)
   */
  slip?: number;
  [k: string]: unknown;
}
export interface MainEngineMachinery {
  equipments: MainEngine[];
  /**
   * The SFOC of the Equipment (g/kWh)
   */
  specific_fuel_oil_consumption?: number;
  [k: string]: unknown;
}
export interface MainEngine {
  /**
   * The id of the main engine
   */
  id: string;
  /**
   * The name of the main engine
   */
  custom_name: string;
  /**
   * The canonical name of the main engine
   */
  canonical_reference: string;
  /**
   * The number of hours the main engine has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the main engine (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the main engine (kWh)
   */
  energy_consumed?: number;
  /**
   * The rpm of the main engine (rpm)
   */
  rpm?: number;
  /**
   * The load of the main engine (%)
   */
  load?: number;
  output_power?: MainEnginePower;
  fuel_consumption?: FuelConsumption[];
  [k: string]: unknown;
}
export interface MainEnginePower {
  /**
   * The power measured by the torsion meter (kW)
   */
  torsion_meter?: number;
  /**
   * Estimated power at main engine (kW)
   */
  main_engine?: number;
  [k: string]: unknown;
}
export interface FuelConsumption {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption[];
  operating_condition_consumptions?: OperatingConditionConsumption[];
  [k: string]: unknown;
}
export interface ConditionalConsumption {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface AuxiliaryEngineMachinery {
  equipments: AuxiliaryEngine[];
  /**
   * The SFOC of the Equipment (g/kWh)
   */
  specific_fuel_oil_consumption?: number;
  total_fuel_consumption?: FuelConsumption2[];
  [k: string]: unknown;
}
export interface AuxiliaryEngine {
  /**
   * The id of the auxiliary engine
   */
  id: string;
  /**
   * The name of the auxiliary engine
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  /**
   * The number of hours the auxiliary engine has been running (hours)
   */
  running_hours?: number;
  /**
   * The rpm of the auxiliary engine (rpm)
   */
  rpm?: number;
  /**
   * The load of the auxiliary engine (%)
   */
  load?: number;
  fuel_consumption?: FuelConsumption1[];
  /**
   * The temperature of the auxiliary engine (°C)
   */
  temperature?: number;
  /**
   * The energy produced by the auxiliary engine (kWh)
   */
  energy_produced?: number;
  [k: string]: unknown;
}
export interface FuelConsumption1 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption1[];
  operating_condition_consumptions?: OperatingConditionConsumption1[];
  [k: string]: unknown;
}
export interface ConditionalConsumption1 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption1 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface FuelConsumption2 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption2[];
  operating_condition_consumptions?: OperatingConditionConsumption2[];
  [k: string]: unknown;
}
export interface ConditionalConsumption2 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption2 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface BoilerMachinery {
  equipments: Boiler[];
  total_fuel_consumption?: FuelConsumption4[];
  [k: string]: unknown;
}
export interface Boiler {
  /**
   * The id of the boiler
   */
  id: string;
  /**
   * The name of the boiler
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  type:
    | (
        | "exhaust_gas_boiler"
        | "composite_boiler"
        | "auxiliary_boiler"
        | "electrical_boilers"
        | "thermal_boiler"
        | "main_boiler"
        | "regas_boiler"
      )
    | string;
  /**
   * The number of hours the boiler has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the boiler (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the boiler (kWh)
   */
  energy_consumed?: number;
  boiler_details?: BoilerDetails;
  fuel_consumption?: FuelConsumption3[];
  [k: string]: unknown;
}
export interface BoilerDetails {
  /**
   * Exhaust temperature in (exhaust & composite boiler) (°C)
   */
  exhaust_temperature_in?: number;
  /**
   * Exhaust temperature out (exhaust & composite boiler) (°C)
   */
  exhaust_temperature_out?: number;
  [k: string]: unknown;
}
export interface FuelConsumption3 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption3[];
  operating_condition_consumptions?: OperatingConditionConsumption3[];
  [k: string]: unknown;
}
export interface ConditionalConsumption3 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption3 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface FuelConsumption4 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption4[];
  operating_condition_consumptions?: OperatingConditionConsumption4[];
  [k: string]: unknown;
}
export interface ConditionalConsumption4 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption4 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface MachineryOtherMachinery {
  equipments: MachineryOther[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption6[];
    operating_condition_consumptions?: OperatingConditionConsumption6[];
    type: ("inert_gas_generation_system" | "incinerator" | "diesel_engine_power_packs") | string;
  }[];
  [k: string]: unknown;
}
export interface MachineryOther {
  /**
   * The id of the other machinery
   */
  id: string;
  /**
   * The name of the other machinery
   */
  custom_name: string;
  /**
   * The canonical name of the other machinery
   */
  canonical_reference: string;
  type: ("inert_gas_generation_system" | "incinerator" | "diesel_engine_power_packs") | string;
  /**
   * The number of hours the other machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the other machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the other machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption5[];
  [k: string]: unknown;
}
export interface FuelConsumption5 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption5[];
  operating_condition_consumptions?: OperatingConditionConsumption5[];
  [k: string]: unknown;
}
export interface ConditionalConsumption5 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption5 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption6 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption6 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface SubFuelConsumptionMainEngine {
  equipments: SubFuelConsumptionMachinery[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption8[];
    operating_condition_consumptions?: OperatingConditionConsumption8[];
    type?: ("shaft_generator" | "pilot_fuel") | string;
  }[];
  [k: string]: unknown;
}
export interface SubFuelConsumptionMachinery {
  /**
   * The id of the sub fuel consumption machinery
   */
  id: string;
  /**
   * The name of the sub fuel consumption machinery
   */
  custom_name: string;
  /**
   * The canonical name of the sub fuel consumption machinery
   */
  canonical_reference: string;
  type:
    | (
        | "auxiliary_blowers"
        | "reliquefaction_systems"
        | "engine_room_fans"
        | "reefers"
        | "generator"
        | "ballast_transfer"
        | "burning_sludge"
        | "cargo_transfer"
        | "tank_cleaning"
        | "fresh_water_generation"
        | "inert_gas_generation"
        | "maintaining_cargo_temperature"
        | "raising_cargo_temperature"
        | "shaft_motor_propulsion"
        | "cargo_cooling_units"
        | "scrubbers_and_egc"
        | "cranes"
        | "other_electrical_consumers"
      )
    | string;
  /**
   * The number of hours the sub fuel consumption machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the sub fuel consumption machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the sub fuel consumption machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption6[];
  [k: string]: unknown;
}
export interface FuelConsumption6 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption7[];
  operating_condition_consumptions?: OperatingConditionConsumption7[];
  [k: string]: unknown;
}
export interface ConditionalConsumption7 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption7 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption8 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption8 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface SubFuelConsumptionAuxEngine {
  equipments: SubFuelConsumptionMachinery1[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption10[];
    operating_condition_consumptions?: OperatingConditionConsumption10[];
    type?:
      | (
          | "auxiliary_blowers"
          | "reliquefaction_systems"
          | "engine_room_fans"
          | "reefers"
          | "generator"
          | "ballast_transfer"
          | "burning_sludge"
          | "cargo_transfer"
          | "tank_cleaning"
          | "fresh_water_generation"
          | "inert_gas_generation"
          | "maintaining_cargo_temperature"
          | "raising_cargo_temperature"
          | "shaft_motor_propulsion"
          | "cargo_cooling_units"
          | "scrubbers_and_egc"
          | "cranes"
          | "other_electrical_consumers"
        )
      | string;
  }[];
  [k: string]: unknown;
}
export interface SubFuelConsumptionMachinery1 {
  /**
   * The id of the sub fuel consumption machinery
   */
  id: string;
  /**
   * The name of the sub fuel consumption machinery
   */
  custom_name: string;
  /**
   * The canonical name of the sub fuel consumption machinery
   */
  canonical_reference: string;
  type:
    | (
        | "auxiliary_blowers"
        | "reliquefaction_systems"
        | "engine_room_fans"
        | "reefers"
        | "generator"
        | "ballast_transfer"
        | "burning_sludge"
        | "cargo_transfer"
        | "tank_cleaning"
        | "fresh_water_generation"
        | "inert_gas_generation"
        | "maintaining_cargo_temperature"
        | "raising_cargo_temperature"
        | "shaft_motor_propulsion"
        | "cargo_cooling_units"
        | "scrubbers_and_egc"
        | "cranes"
        | "other_electrical_consumers"
      )
    | string;
  /**
   * The number of hours the sub fuel consumption machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the sub fuel consumption machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the sub fuel consumption machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption7[];
  [k: string]: unknown;
}
export interface FuelConsumption7 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption9[];
  operating_condition_consumptions?: OperatingConditionConsumption9[];
  [k: string]: unknown;
}
export interface ConditionalConsumption9 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption9 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption10 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption10 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface SubFuelConsumptionBoiler {
  equipments: SubFuelConsumptionMachinery2[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption12[];
    operating_condition_consumptions?: OperatingConditionConsumption12[];
    type?:
      | (
          | "auxiliary_blowers"
          | "reliquefaction_systems"
          | "engine_room_fans"
          | "reefers"
          | "generator"
          | "ballast_transfer"
          | "burning_sludge"
          | "cargo_transfer"
          | "tank_cleaning"
          | "fresh_water_generation"
          | "inert_gas_generation"
          | "maintaining_cargo_temperature"
          | "raising_cargo_temperature"
          | "shaft_motor_propulsion"
          | "cargo_cooling_units"
          | "scrubbers_and_egc"
          | "cranes"
          | "other_electrical_consumers"
        )
      | string;
  }[];
  [k: string]: unknown;
}
export interface SubFuelConsumptionMachinery2 {
  /**
   * The id of the sub fuel consumption machinery
   */
  id: string;
  /**
   * The name of the sub fuel consumption machinery
   */
  custom_name: string;
  /**
   * The canonical name of the sub fuel consumption machinery
   */
  canonical_reference: string;
  type:
    | (
        | "auxiliary_blowers"
        | "reliquefaction_systems"
        | "engine_room_fans"
        | "reefers"
        | "generator"
        | "ballast_transfer"
        | "burning_sludge"
        | "cargo_transfer"
        | "tank_cleaning"
        | "fresh_water_generation"
        | "inert_gas_generation"
        | "maintaining_cargo_temperature"
        | "raising_cargo_temperature"
        | "shaft_motor_propulsion"
        | "cargo_cooling_units"
        | "scrubbers_and_egc"
        | "cranes"
        | "other_electrical_consumers"
      )
    | string;
  /**
   * The number of hours the sub fuel consumption machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the sub fuel consumption machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the sub fuel consumption machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption8[];
  [k: string]: unknown;
}
export interface FuelConsumption8 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption11[];
  operating_condition_consumptions?: OperatingConditionConsumption11[];
  [k: string]: unknown;
}
export interface ConditionalConsumption11 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption11 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption12 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption12 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface NoonReportPort {
  port: Port3;
  port_purpose?:
    | ("loading" | "discharging" | "bunkering" | "awaiting_order" | "drifting" | "anchorage" | "ship_to_ship")
    | string;
  status?: ("origin" | "destination" | "current") | string;
  reference_points?: NoonReportPortReferencePoints[];
}
export interface Port3 {
  /**
   * Port ID
   */
  id: string;
  /**
   * Port name
   */
  name: string;
  /**
   * Country code of the port
   */
  country_code: string;
  /**
   * UN/LOCODE of the port
   */
  unlocode?: string;
  /**
   * Is the port in port limits (regulation)
   */
  in_port_limits?: boolean;
  location: Location3;
  [k: string]: unknown;
}
export interface Location3 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface NoonReportPortReferencePoints {
  type?: ("pilot_station" | "end_of_sea_passage" | "commencement_of_sea_passage") | string;
  position?: Location4;
  /**
   * Expected time of arrival or departure at the reference point
   */
  time_of_arrival_or_departure_at_reference_point?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * Distance to the reference point (nm)
   */
  distance_to_reference_point?: number;
}
export interface Location4 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface Weather {
  air?: WeatherAir;
  wind?: WeatherWind;
  waves?: WeatherWaves;
  swell?: WeatherSwell;
  current?: Current;
  sea_water?: WeatherSeaWater;
  [k: string]: unknown;
}
export interface WeatherAir {
  /**
   * The temperature of the air (°C)
   */
  temperature?: number;
  /**
   * The pressure of the air (bars)
   */
  pressure?: number;
  /**
   * The humidity of the air (%)
   */
  humidity?: number;
  [k: string]: unknown;
}
export interface WeatherWind {
  /**
   * The speed of the wind (kn)
   */
  speed?: number;
  /**
   * The absolute direction of the wind (deg)
   */
  direction?: number;
  /**
   * Wind strength on the Beaufort scale, between 0 and 12
   */
  beaufort_number?: number;
  [k: string]: unknown;
}
export interface WeatherWaves {
  /**
   * The height of the waves (m)
   */
  height?: number;
  /**
   * The absolute direction of the waves (deg)
   */
  direction?: number;
  [k: string]: unknown;
}
export interface WeatherSwell {
  /**
   * The height of the swell (m)
   */
  height?: number;
  /**
   * The absolute direction of the swell (deg)
   */
  direction?: number;
  /**
   * The period of the swell (seconds)
   */
  period?: number;
  [k: string]: unknown;
}
export interface Current {
  /**
   * The speed of the current (kn)
   */
  speed?: number;
  /**
   * The absolute direction of the current (deg)
   */
  direction?: number;
  [k: string]: unknown;
}
export interface WeatherSeaWater {
  /**
   * The temperature of the sea water (°C)
   */
  temperature?: number;
  /**
   * The salinity of the sea water (%)
   */
  salinity?: number;
  [k: string]: unknown;
}
export interface NoonReportInstruction {
  type?:
    | (
        | "tank_pressure_at_arrival"
        | "tank_temperature_at_arrival"
        | "estimated_time_of_arrival"
        | "fixed_consumption"
        | "fixed_me_power"
        | "fixed_me_load"
        | "minimum_power"
        | "most_economical_speed"
        | "speed_over_ground"
        | "speed_through_water"
        | "fixed_me_rpm"
      )
    | string;
  /**
   * The person or company who gave the instruction
   */
  given_by?: string;
  instruction_details?: NoonReportInstructionDetails;
  [k: string]: unknown;
}
export interface NoonReportInstructionDetails {
  tank_id?: string;
  /**
   * The datetime of the instruction
   */
  instruction_datetime?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * Value dependent on the instruction type
   */
  value?: number;
}
export interface NoonReportNavigation {
  position?: Location5;
  /**
   * Course of the vessel (deg)
   */
  course?: number;
  speed: NoonReportNavigationSpeed;
  sailed_distance: NoonReportNavigationDistance;
  draught?: NoonReportNavigationDraught;
  /**
   * Difference between the average forward and aft draughts (m)
   */
  trim?: number;
  roll?: NoonReportNavigationRoll;
  pitch?: NoonReportNavigationRoll1;
  loading_condition?: ("ballast" | "laden") | string;
  performance_codes?: {
    /**
     * Performance code
     */
    code: string;
    /**
     * Performance code label
     */
    label: string;
  }[];
  bad_weather?: NoonReportNavigationBadWeather;
  sailed_in_ice?: NoonReportNavigationSailedInIce;
}
export interface Location5 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface NoonReportNavigationSpeed {
  /**
   * Speed over ground (GPS) (kn)
   */
  observed: number;
  /**
   * Speed through water (kn)
   */
  logged?: number;
  /**
   * Impact due to current (kn)
   */
  impact_due_to_current?: number;
}
export interface NoonReportNavigationDistance {
  /**
   * Distance over ground (GPS) (nm)
   */
  observed: number;
  /**
   * Distance through water (nm)
   */
  logged?: number;
}
export interface NoonReportNavigationDraught {
  fore?: NoonReportNavigationDraughtItem;
  mid?: NoonReportNavigationDraughtItem1;
  aft?: NoonReportNavigationDraughtItem2;
}
export interface NoonReportNavigationDraughtItem {
  /**
   * Starboard draught (m)
   */
  starboard?: number;
  /**
   * Port draught (m)
   */
  port?: number;
  /**
   * Average draught (m)
   */
  average?: number;
}
export interface NoonReportNavigationDraughtItem1 {
  /**
   * Starboard draught (m)
   */
  starboard?: number;
  /**
   * Port draught (m)
   */
  port?: number;
  /**
   * Average draught (m)
   */
  average?: number;
}
export interface NoonReportNavigationDraughtItem2 {
  /**
   * Starboard draught (m)
   */
  starboard?: number;
  /**
   * Port draught (m)
   */
  port?: number;
  /**
   * Average draught (m)
   */
  average?: number;
}
export interface NoonReportNavigationRoll {
  /**
   * Max roll angle (deg)
   */
  max?: number;
  /**
   * Average roll angle (deg)
   */
  average?: number;
}
export interface NoonReportNavigationRoll1 {
  /**
   * Max roll angle (deg)
   */
  max?: number;
  /**
   * Average roll angle (deg)
   */
  average?: number;
}
export interface NoonReportNavigationBadWeather {
  /**
   * Distance sailed in bad weather (nm)
   */
  distance_sailed_in_bad_weather?: number;
  /**
   * Duration of bad weather (hours)
   */
  duration_of_bad_weather?: number;
}
export interface NoonReportNavigationSailedInIce {
  /**
   * Water covered in ice
   */
  water_covered_in_ice?: boolean;
  /**
   * Distance sailed in ice (nm)
   */
  distance_sailed_in_ice?: number;
  /**
   * Duration sailed in ice (hours)
   */
  duration_sailed_in_ice?: number;
}
export interface NoonReport1 {
  /**
   * The type of event that occurred
   */
  type: ("at_sea" | "in_port" | "arrival" | "departure") | string;
  /**
   * The name of the captain
   */
  captain_name?: string;
  /**
   * The name of the chief engineer
   */
  chief_engineer_name?: string;
  storage: NoonReportStorage1;
  operating_conditions: OperatingCondition1[];
  machinery: NoonReportMachinery1;
  ports: NoonReportPort1[];
  weather?: Weather1;
  instructions: NoonReportInstruction1[];
  navigation: NoonReportNavigation1;
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface NoonReportStorage1 {
  bunkers: NoonReportStorageBunker1[];
  cargos: NoonReportStorageCargo1[];
  lubricants: NoonReportStorageLubricants1[];
  other_stores: NoonReportStorageOther1[];
  [k: string]: unknown;
}
export interface NoonReportStorageBunker1 {
  /**
   * The id of the bunker
   */
  id: string;
  tank?: Tank11;
  bunker: Bunker4;
  /**
   * The amount of bunker remaining (mt)
   */
  remaining?: number;
  [k: string]: unknown;
}
export interface Tank11 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Bunker4 {
  /**
   * Fuel grade
   */
  fuel_grade: ("hsfo" | "vlsfo" | "mgo" | "lng") | string;
  details?: BunkerDetails4;
  [k: string]: unknown;
}
/**
 * Details of the fuel grade, properties based on type
 */
export interface BunkerDetails4 {
  /**
   * %
   */
  sulphur?: number;
  /**
   * kg/m3
   */
  density?: number;
  /**
   * cSt
   */
  viscosity?: number;
  /**
   * Lower calorific value (MJ/kg)
   */
  lower_calorific_value?: number;
  /**
   * Percentage of biofuel (%)
   */
  percentage_of_bio?: number;
  /**
   * CO2 conversion factor (kg CO2/kg fuel)
   */
  co2_conversion_factor?: number;
  /**
   * Temperature of the flash point (°C)
   */
  flash_point?: number;
  /**
   * Deep tank ROB (mt)
   */
  deepTankROB?: number;
  /**
   * Settling tank ROB (mt)
   */
  settlingTankROB?: number;
  /**
   * Service tank ROB (mt)
   */
  serviceTankROB?: number;
  /**
   * Overflow tank ROB (mt)
   */
  overflowTankROB?: number;
  origin?: BunkerDetailsOrigin4;
  [k: string]: unknown;
}
export interface BunkerDetailsOrigin4 {
  /**
   * Unique batch ID
   */
  batch_id?: string;
  /**
   * Provider of the fuel
   */
  provider?: string;
  [k: string]: unknown;
}
export interface NoonReportStorageCargo1 {
  tank?: Tank12;
  cargo?: Cargo4;
  /**
   * The weight of the cargo (mt)
   */
  cargo_weight?: number;
  cargo_details?: NoonReportStorageCargoDetails1;
  [k: string]: unknown;
}
export interface Tank12 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Cargo4 {
  /**
   * unique Id to be able to follow cargo
   */
  id: string;
  /**
   * Name of the cargo
   */
  name?: string;
  /**
   * Type of the cargo
   */
  type?: ("crude_oil" | "lng" | "lpg" | "chemicals" | "dry_bulk" | "container") | string;
  characteristics?: CargoCharacteristics4;
  [k: string]: unknown;
}
export interface CargoCharacteristics4 {
  /**
   * Grade of the cargo
   */
  grade?: string;
  /**
   * Density of the cargo (kg/m3)
   */
  density?: number;
  /**
   * Viscosity of the cargo (cSt)
   */
  viscosity?: number;
  /**
   * Does the cargo require to be heated or not
   */
  heated_cargo?: boolean;
  [k: string]: unknown;
}
export interface NoonReportStorageCargoDetails1 {
  /**
   * The vapor pressure of the cargo (mmWG)
   */
  vapor_pressure?: number;
  /**
   * The temperature of the cargo (°C)
   */
  liquid_temperature?: number;
  [k: string]: unknown;
}
export interface NoonReportStorageLubricants1 {
  tank_id: string;
  lubricant_grade?: Lubricant4;
  /**
   * The amount of lubricant consumed (L)
   */
  consumed?: number;
  /**
   * The amount of lubricant remaining (L)
   */
  remaining?: number;
  [k: string]: unknown;
}
export interface Lubricant4 {
  /**
   * The type of lubricant
   */
  lubricant_type:
    | ("me-lube-oil" | "ae-lube-oil" | "cylinder-oil" | "high-bn-cylinder-oil" | "low-bn-cylinder-oil")
    | string;
  /**
   * The base number of the lubricant
   */
  base_number?: number;
  /**
   * The density of the lubricant (kg/m3)
   */
  density?: number;
  /**
   * The viscosity of the lubricant (cSt)
   */
  viscosity?: number;
  [k: string]: unknown;
}
export interface NoonReportStorageOther1 {
  tank_id: string;
  type:
    | ("fresh_water_distilled" | "fresh_water_drinking" | "fresh_water_cleaning" | "ballast_water" | "sludge" | "slops")
    | string;
  /**
   * Total amount entering the tank (generated or bunkered) (mt)
   */
  in?: number;
  /**
   * Total amount leaving the tank (consumed or discharged) (mt)
   */
  out?: number;
  /**
   * The amount remaining in the tank (mt)
   */
  remaining?: number;
  details?: NoonReportStorageOtherDetails1;
  [k: string]: unknown;
}
export interface NoonReportStorageOtherDetails1 {
  /**
   * The amount produced (mt)
   */
  produced?: number;
  /**
   * The amount consumed (mt)
   */
  consumed?: number;
  /**
   * The amount received (mt)
   */
  received?: number;
  /**
   * The amount discharged (mt)
   */
  discharged?: number;
  /**
   * The amount discharged (m3)
   */
  discharged_m3?: number;
  /**
   * The amount incinerated (mt)
   */
  incinerated?: number;
  /**
   * The amount incinerated (m3)
   */
  incinerated_m3?: number;
  /**
   * The temperature of the liquid (°C)
   */
  liquid_temperature?: number;
  [k: string]: unknown;
}
/**
 * List Operating condition of the vessel over the reporting period (used for regulatory reporting at port)
 */
export interface OperatingCondition1 {
  /**
   * Operating condition id
   */
  id: string;
  /**
   * The condition of the operating condition
   */
  condition?: string;
  /**
   * The duration of the operating condition (hours)
   */
  duration?: number;
  /**
   * The start datetime of the operating condition
   */
  period_start?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the operating condition
   */
  period_end?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface NoonReportMachinery1 {
  propellers: Propeller1[];
  main_engine: MainEngineMachinery1;
  auxiliary_engines: AuxiliaryEngineMachinery1;
  boilers: BoilerMachinery1;
  other_machinery: MachineryOtherMachinery1;
  sub_fuel_consumption_main_engines: SubFuelConsumptionMainEngine1[];
  sub_fuel_consumption_auxiliary_engines: SubFuelConsumptionAuxEngine1[];
  sub_fuel_consumption_boilers: SubFuelConsumptionBoiler1[];
}
export interface Propeller1 {
  /**
   * The id of the propeller
   */
  id: string;
  /**
   * Propeller distance (nm)
   */
  distance?: number;
  /**
   * Propeller slip (%)
   */
  slip?: number;
  [k: string]: unknown;
}
export interface MainEngineMachinery1 {
  equipments: MainEngine1[];
  /**
   * The SFOC of the Equipment (g/kWh)
   */
  specific_fuel_oil_consumption?: number;
  [k: string]: unknown;
}
export interface MainEngine1 {
  /**
   * The id of the main engine
   */
  id: string;
  /**
   * The name of the main engine
   */
  custom_name: string;
  /**
   * The canonical name of the main engine
   */
  canonical_reference: string;
  /**
   * The number of hours the main engine has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the main engine (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the main engine (kWh)
   */
  energy_consumed?: number;
  /**
   * The rpm of the main engine (rpm)
   */
  rpm?: number;
  /**
   * The load of the main engine (%)
   */
  load?: number;
  output_power?: MainEnginePower1;
  fuel_consumption?: FuelConsumption9[];
  [k: string]: unknown;
}
export interface MainEnginePower1 {
  /**
   * The power measured by the torsion meter (kW)
   */
  torsion_meter?: number;
  /**
   * Estimated power at main engine (kW)
   */
  main_engine?: number;
  [k: string]: unknown;
}
export interface FuelConsumption9 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption13[];
  operating_condition_consumptions?: OperatingConditionConsumption13[];
  [k: string]: unknown;
}
export interface ConditionalConsumption13 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption13 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface AuxiliaryEngineMachinery1 {
  equipments: AuxiliaryEngine1[];
  /**
   * The SFOC of the Equipment (g/kWh)
   */
  specific_fuel_oil_consumption?: number;
  total_fuel_consumption?: FuelConsumption11[];
  [k: string]: unknown;
}
export interface AuxiliaryEngine1 {
  /**
   * The id of the auxiliary engine
   */
  id: string;
  /**
   * The name of the auxiliary engine
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  /**
   * The number of hours the auxiliary engine has been running (hours)
   */
  running_hours?: number;
  /**
   * The rpm of the auxiliary engine (rpm)
   */
  rpm?: number;
  /**
   * The load of the auxiliary engine (%)
   */
  load?: number;
  fuel_consumption?: FuelConsumption10[];
  /**
   * The temperature of the auxiliary engine (°C)
   */
  temperature?: number;
  /**
   * The energy produced by the auxiliary engine (kWh)
   */
  energy_produced?: number;
  [k: string]: unknown;
}
export interface FuelConsumption10 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption14[];
  operating_condition_consumptions?: OperatingConditionConsumption14[];
  [k: string]: unknown;
}
export interface ConditionalConsumption14 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption14 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface FuelConsumption11 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption15[];
  operating_condition_consumptions?: OperatingConditionConsumption15[];
  [k: string]: unknown;
}
export interface ConditionalConsumption15 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption15 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface BoilerMachinery1 {
  equipments: Boiler1[];
  total_fuel_consumption?: FuelConsumption13[];
  [k: string]: unknown;
}
export interface Boiler1 {
  /**
   * The id of the boiler
   */
  id: string;
  /**
   * The name of the boiler
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  type:
    | (
        | "exhaust_gas_boiler"
        | "composite_boiler"
        | "auxiliary_boiler"
        | "electrical_boilers"
        | "thermal_boiler"
        | "main_boiler"
        | "regas_boiler"
      )
    | string;
  /**
   * The number of hours the boiler has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the boiler (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the boiler (kWh)
   */
  energy_consumed?: number;
  boiler_details?: BoilerDetails1;
  fuel_consumption?: FuelConsumption12[];
  [k: string]: unknown;
}
export interface BoilerDetails1 {
  /**
   * Exhaust temperature in (exhaust & composite boiler) (°C)
   */
  exhaust_temperature_in?: number;
  /**
   * Exhaust temperature out (exhaust & composite boiler) (°C)
   */
  exhaust_temperature_out?: number;
  [k: string]: unknown;
}
export interface FuelConsumption12 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption16[];
  operating_condition_consumptions?: OperatingConditionConsumption16[];
  [k: string]: unknown;
}
export interface ConditionalConsumption16 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption16 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface FuelConsumption13 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption17[];
  operating_condition_consumptions?: OperatingConditionConsumption17[];
  [k: string]: unknown;
}
export interface ConditionalConsumption17 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption17 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface MachineryOtherMachinery1 {
  equipments: MachineryOther1[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption19[];
    operating_condition_consumptions?: OperatingConditionConsumption19[];
    type: ("inert_gas_generation_system" | "incinerator" | "diesel_engine_power_packs") | string;
  }[];
  [k: string]: unknown;
}
export interface MachineryOther1 {
  /**
   * The id of the other machinery
   */
  id: string;
  /**
   * The name of the other machinery
   */
  custom_name: string;
  /**
   * The canonical name of the other machinery
   */
  canonical_reference: string;
  type: ("inert_gas_generation_system" | "incinerator" | "diesel_engine_power_packs") | string;
  /**
   * The number of hours the other machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the other machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the other machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption14[];
  [k: string]: unknown;
}
export interface FuelConsumption14 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption18[];
  operating_condition_consumptions?: OperatingConditionConsumption18[];
  [k: string]: unknown;
}
export interface ConditionalConsumption18 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption18 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption19 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption19 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface SubFuelConsumptionMainEngine1 {
  equipments: SubFuelConsumptionMachinery3[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption21[];
    operating_condition_consumptions?: OperatingConditionConsumption21[];
    type?: ("shaft_generator" | "pilot_fuel") | string;
  }[];
  [k: string]: unknown;
}
export interface SubFuelConsumptionMachinery3 {
  /**
   * The id of the sub fuel consumption machinery
   */
  id: string;
  /**
   * The name of the sub fuel consumption machinery
   */
  custom_name: string;
  /**
   * The canonical name of the sub fuel consumption machinery
   */
  canonical_reference: string;
  type:
    | (
        | "auxiliary_blowers"
        | "reliquefaction_systems"
        | "engine_room_fans"
        | "reefers"
        | "generator"
        | "ballast_transfer"
        | "burning_sludge"
        | "cargo_transfer"
        | "tank_cleaning"
        | "fresh_water_generation"
        | "inert_gas_generation"
        | "maintaining_cargo_temperature"
        | "raising_cargo_temperature"
        | "shaft_motor_propulsion"
        | "cargo_cooling_units"
        | "scrubbers_and_egc"
        | "cranes"
        | "other_electrical_consumers"
      )
    | string;
  /**
   * The number of hours the sub fuel consumption machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the sub fuel consumption machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the sub fuel consumption machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption15[];
  [k: string]: unknown;
}
export interface FuelConsumption15 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption20[];
  operating_condition_consumptions?: OperatingConditionConsumption20[];
  [k: string]: unknown;
}
export interface ConditionalConsumption20 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption20 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption21 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption21 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface SubFuelConsumptionAuxEngine1 {
  equipments: SubFuelConsumptionMachinery4[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption23[];
    operating_condition_consumptions?: OperatingConditionConsumption23[];
    type?:
      | (
          | "auxiliary_blowers"
          | "reliquefaction_systems"
          | "engine_room_fans"
          | "reefers"
          | "generator"
          | "ballast_transfer"
          | "burning_sludge"
          | "cargo_transfer"
          | "tank_cleaning"
          | "fresh_water_generation"
          | "inert_gas_generation"
          | "maintaining_cargo_temperature"
          | "raising_cargo_temperature"
          | "shaft_motor_propulsion"
          | "cargo_cooling_units"
          | "scrubbers_and_egc"
          | "cranes"
          | "other_electrical_consumers"
        )
      | string;
  }[];
  [k: string]: unknown;
}
export interface SubFuelConsumptionMachinery4 {
  /**
   * The id of the sub fuel consumption machinery
   */
  id: string;
  /**
   * The name of the sub fuel consumption machinery
   */
  custom_name: string;
  /**
   * The canonical name of the sub fuel consumption machinery
   */
  canonical_reference: string;
  type:
    | (
        | "auxiliary_blowers"
        | "reliquefaction_systems"
        | "engine_room_fans"
        | "reefers"
        | "generator"
        | "ballast_transfer"
        | "burning_sludge"
        | "cargo_transfer"
        | "tank_cleaning"
        | "fresh_water_generation"
        | "inert_gas_generation"
        | "maintaining_cargo_temperature"
        | "raising_cargo_temperature"
        | "shaft_motor_propulsion"
        | "cargo_cooling_units"
        | "scrubbers_and_egc"
        | "cranes"
        | "other_electrical_consumers"
      )
    | string;
  /**
   * The number of hours the sub fuel consumption machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the sub fuel consumption machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the sub fuel consumption machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption16[];
  [k: string]: unknown;
}
export interface FuelConsumption16 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption22[];
  operating_condition_consumptions?: OperatingConditionConsumption22[];
  [k: string]: unknown;
}
export interface ConditionalConsumption22 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption22 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption23 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption23 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface SubFuelConsumptionBoiler1 {
  equipments: SubFuelConsumptionMachinery5[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption25[];
    operating_condition_consumptions?: OperatingConditionConsumption25[];
    type?:
      | (
          | "auxiliary_blowers"
          | "reliquefaction_systems"
          | "engine_room_fans"
          | "reefers"
          | "generator"
          | "ballast_transfer"
          | "burning_sludge"
          | "cargo_transfer"
          | "tank_cleaning"
          | "fresh_water_generation"
          | "inert_gas_generation"
          | "maintaining_cargo_temperature"
          | "raising_cargo_temperature"
          | "shaft_motor_propulsion"
          | "cargo_cooling_units"
          | "scrubbers_and_egc"
          | "cranes"
          | "other_electrical_consumers"
        )
      | string;
  }[];
  [k: string]: unknown;
}
export interface SubFuelConsumptionMachinery5 {
  /**
   * The id of the sub fuel consumption machinery
   */
  id: string;
  /**
   * The name of the sub fuel consumption machinery
   */
  custom_name: string;
  /**
   * The canonical name of the sub fuel consumption machinery
   */
  canonical_reference: string;
  type:
    | (
        | "auxiliary_blowers"
        | "reliquefaction_systems"
        | "engine_room_fans"
        | "reefers"
        | "generator"
        | "ballast_transfer"
        | "burning_sludge"
        | "cargo_transfer"
        | "tank_cleaning"
        | "fresh_water_generation"
        | "inert_gas_generation"
        | "maintaining_cargo_temperature"
        | "raising_cargo_temperature"
        | "shaft_motor_propulsion"
        | "cargo_cooling_units"
        | "scrubbers_and_egc"
        | "cranes"
        | "other_electrical_consumers"
      )
    | string;
  /**
   * The number of hours the sub fuel consumption machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the sub fuel consumption machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the sub fuel consumption machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption17[];
  [k: string]: unknown;
}
export interface FuelConsumption17 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption24[];
  operating_condition_consumptions?: OperatingConditionConsumption24[];
  [k: string]: unknown;
}
export interface ConditionalConsumption24 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption24 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption25 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption25 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface NoonReportPort1 {
  port: Port4;
  port_purpose?:
    | ("loading" | "discharging" | "bunkering" | "awaiting_order" | "drifting" | "anchorage" | "ship_to_ship")
    | string;
  status?: ("origin" | "destination" | "current") | string;
  reference_points?: NoonReportPortReferencePoints1[];
}
export interface Port4 {
  /**
   * Port ID
   */
  id: string;
  /**
   * Port name
   */
  name: string;
  /**
   * Country code of the port
   */
  country_code: string;
  /**
   * UN/LOCODE of the port
   */
  unlocode?: string;
  /**
   * Is the port in port limits (regulation)
   */
  in_port_limits?: boolean;
  location: Location6;
  [k: string]: unknown;
}
export interface Location6 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface NoonReportPortReferencePoints1 {
  type?: ("pilot_station" | "end_of_sea_passage" | "commencement_of_sea_passage") | string;
  position?: Location7;
  /**
   * Expected time of arrival or departure at the reference point
   */
  time_of_arrival_or_departure_at_reference_point?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * Distance to the reference point (nm)
   */
  distance_to_reference_point?: number;
}
export interface Location7 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface Weather1 {
  air?: WeatherAir1;
  wind?: WeatherWind1;
  waves?: WeatherWaves1;
  swell?: WeatherSwell1;
  current?: Current1;
  sea_water?: WeatherSeaWater1;
  [k: string]: unknown;
}
export interface WeatherAir1 {
  /**
   * The temperature of the air (°C)
   */
  temperature?: number;
  /**
   * The pressure of the air (bars)
   */
  pressure?: number;
  /**
   * The humidity of the air (%)
   */
  humidity?: number;
  [k: string]: unknown;
}
export interface WeatherWind1 {
  /**
   * The speed of the wind (kn)
   */
  speed?: number;
  /**
   * The absolute direction of the wind (deg)
   */
  direction?: number;
  /**
   * Wind strength on the Beaufort scale, between 0 and 12
   */
  beaufort_number?: number;
  [k: string]: unknown;
}
export interface WeatherWaves1 {
  /**
   * The height of the waves (m)
   */
  height?: number;
  /**
   * The absolute direction of the waves (deg)
   */
  direction?: number;
  [k: string]: unknown;
}
export interface WeatherSwell1 {
  /**
   * The height of the swell (m)
   */
  height?: number;
  /**
   * The absolute direction of the swell (deg)
   */
  direction?: number;
  /**
   * The period of the swell (seconds)
   */
  period?: number;
  [k: string]: unknown;
}
export interface Current1 {
  /**
   * The speed of the current (kn)
   */
  speed?: number;
  /**
   * The absolute direction of the current (deg)
   */
  direction?: number;
  [k: string]: unknown;
}
export interface WeatherSeaWater1 {
  /**
   * The temperature of the sea water (°C)
   */
  temperature?: number;
  /**
   * The salinity of the sea water (%)
   */
  salinity?: number;
  [k: string]: unknown;
}
export interface NoonReportInstruction1 {
  type?:
    | (
        | "tank_pressure_at_arrival"
        | "tank_temperature_at_arrival"
        | "estimated_time_of_arrival"
        | "fixed_consumption"
        | "fixed_me_power"
        | "fixed_me_load"
        | "minimum_power"
        | "most_economical_speed"
        | "speed_over_ground"
        | "speed_through_water"
        | "fixed_me_rpm"
      )
    | string;
  /**
   * The person or company who gave the instruction
   */
  given_by?: string;
  instruction_details?: NoonReportInstructionDetails1;
  [k: string]: unknown;
}
export interface NoonReportInstructionDetails1 {
  tank_id?: string;
  /**
   * The datetime of the instruction
   */
  instruction_datetime?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * Value dependent on the instruction type
   */
  value?: number;
}
export interface NoonReportNavigation1 {
  position?: Location8;
  /**
   * Course of the vessel (deg)
   */
  course?: number;
  speed: NoonReportNavigationSpeed1;
  sailed_distance: NoonReportNavigationDistance1;
  draught?: NoonReportNavigationDraught1;
  /**
   * Difference between the average forward and aft draughts (m)
   */
  trim?: number;
  roll?: NoonReportNavigationRoll2;
  pitch?: NoonReportNavigationRoll3;
  loading_condition?: ("ballast" | "laden") | string;
  performance_codes?: {
    /**
     * Performance code
     */
    code: string;
    /**
     * Performance code label
     */
    label: string;
  }[];
  bad_weather?: NoonReportNavigationBadWeather1;
  sailed_in_ice?: NoonReportNavigationSailedInIce1;
}
export interface Location8 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface NoonReportNavigationSpeed1 {
  /**
   * Speed over ground (GPS) (kn)
   */
  observed: number;
  /**
   * Speed through water (kn)
   */
  logged?: number;
  /**
   * Impact due to current (kn)
   */
  impact_due_to_current?: number;
}
export interface NoonReportNavigationDistance1 {
  /**
   * Distance over ground (GPS) (nm)
   */
  observed: number;
  /**
   * Distance through water (nm)
   */
  logged?: number;
}
export interface NoonReportNavigationDraught1 {
  fore?: NoonReportNavigationDraughtItem3;
  mid?: NoonReportNavigationDraughtItem4;
  aft?: NoonReportNavigationDraughtItem5;
}
export interface NoonReportNavigationDraughtItem3 {
  /**
   * Starboard draught (m)
   */
  starboard?: number;
  /**
   * Port draught (m)
   */
  port?: number;
  /**
   * Average draught (m)
   */
  average?: number;
}
export interface NoonReportNavigationDraughtItem4 {
  /**
   * Starboard draught (m)
   */
  starboard?: number;
  /**
   * Port draught (m)
   */
  port?: number;
  /**
   * Average draught (m)
   */
  average?: number;
}
export interface NoonReportNavigationDraughtItem5 {
  /**
   * Starboard draught (m)
   */
  starboard?: number;
  /**
   * Port draught (m)
   */
  port?: number;
  /**
   * Average draught (m)
   */
  average?: number;
}
export interface NoonReportNavigationRoll2 {
  /**
   * Max roll angle (deg)
   */
  max?: number;
  /**
   * Average roll angle (deg)
   */
  average?: number;
}
export interface NoonReportNavigationRoll3 {
  /**
   * Max roll angle (deg)
   */
  max?: number;
  /**
   * Average roll angle (deg)
   */
  average?: number;
}
export interface NoonReportNavigationBadWeather1 {
  /**
   * Distance sailed in bad weather (nm)
   */
  distance_sailed_in_bad_weather?: number;
  /**
   * Duration of bad weather (hours)
   */
  duration_of_bad_weather?: number;
}
export interface NoonReportNavigationSailedInIce1 {
  /**
   * Water covered in ice
   */
  water_covered_in_ice?: boolean;
  /**
   * Distance sailed in ice (nm)
   */
  distance_sailed_in_ice?: number;
  /**
   * Duration sailed in ice (hours)
   */
  duration_sailed_in_ice?: number;
}
export interface NoonReport2 {
  /**
   * The type of event that occurred
   */
  type: ("at_sea" | "in_port" | "arrival" | "departure") | string;
  /**
   * The name of the captain
   */
  captain_name?: string;
  /**
   * The name of the chief engineer
   */
  chief_engineer_name?: string;
  storage: NoonReportStorage2;
  operating_conditions: OperatingCondition2[];
  machinery: NoonReportMachinery2;
  ports: NoonReportPort2[];
  weather?: Weather2;
  instructions: NoonReportInstruction2[];
  navigation: NoonReportNavigation2;
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface NoonReportStorage2 {
  bunkers: NoonReportStorageBunker2[];
  cargos: NoonReportStorageCargo2[];
  lubricants: NoonReportStorageLubricants2[];
  other_stores: NoonReportStorageOther2[];
  [k: string]: unknown;
}
export interface NoonReportStorageBunker2 {
  /**
   * The id of the bunker
   */
  id: string;
  tank?: Tank13;
  bunker: Bunker5;
  /**
   * The amount of bunker remaining (mt)
   */
  remaining?: number;
  [k: string]: unknown;
}
export interface Tank13 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Bunker5 {
  /**
   * Fuel grade
   */
  fuel_grade: ("hsfo" | "vlsfo" | "mgo" | "lng") | string;
  details?: BunkerDetails5;
  [k: string]: unknown;
}
/**
 * Details of the fuel grade, properties based on type
 */
export interface BunkerDetails5 {
  /**
   * %
   */
  sulphur?: number;
  /**
   * kg/m3
   */
  density?: number;
  /**
   * cSt
   */
  viscosity?: number;
  /**
   * Lower calorific value (MJ/kg)
   */
  lower_calorific_value?: number;
  /**
   * Percentage of biofuel (%)
   */
  percentage_of_bio?: number;
  /**
   * CO2 conversion factor (kg CO2/kg fuel)
   */
  co2_conversion_factor?: number;
  /**
   * Temperature of the flash point (°C)
   */
  flash_point?: number;
  /**
   * Deep tank ROB (mt)
   */
  deepTankROB?: number;
  /**
   * Settling tank ROB (mt)
   */
  settlingTankROB?: number;
  /**
   * Service tank ROB (mt)
   */
  serviceTankROB?: number;
  /**
   * Overflow tank ROB (mt)
   */
  overflowTankROB?: number;
  origin?: BunkerDetailsOrigin5;
  [k: string]: unknown;
}
export interface BunkerDetailsOrigin5 {
  /**
   * Unique batch ID
   */
  batch_id?: string;
  /**
   * Provider of the fuel
   */
  provider?: string;
  [k: string]: unknown;
}
export interface NoonReportStorageCargo2 {
  tank?: Tank14;
  cargo?: Cargo5;
  /**
   * The weight of the cargo (mt)
   */
  cargo_weight?: number;
  cargo_details?: NoonReportStorageCargoDetails2;
  [k: string]: unknown;
}
export interface Tank14 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Cargo5 {
  /**
   * unique Id to be able to follow cargo
   */
  id: string;
  /**
   * Name of the cargo
   */
  name?: string;
  /**
   * Type of the cargo
   */
  type?: ("crude_oil" | "lng" | "lpg" | "chemicals" | "dry_bulk" | "container") | string;
  characteristics?: CargoCharacteristics5;
  [k: string]: unknown;
}
export interface CargoCharacteristics5 {
  /**
   * Grade of the cargo
   */
  grade?: string;
  /**
   * Density of the cargo (kg/m3)
   */
  density?: number;
  /**
   * Viscosity of the cargo (cSt)
   */
  viscosity?: number;
  /**
   * Does the cargo require to be heated or not
   */
  heated_cargo?: boolean;
  [k: string]: unknown;
}
export interface NoonReportStorageCargoDetails2 {
  /**
   * The vapor pressure of the cargo (mmWG)
   */
  vapor_pressure?: number;
  /**
   * The temperature of the cargo (°C)
   */
  liquid_temperature?: number;
  [k: string]: unknown;
}
export interface NoonReportStorageLubricants2 {
  tank_id: string;
  lubricant_grade?: Lubricant5;
  /**
   * The amount of lubricant consumed (L)
   */
  consumed?: number;
  /**
   * The amount of lubricant remaining (L)
   */
  remaining?: number;
  [k: string]: unknown;
}
export interface Lubricant5 {
  /**
   * The type of lubricant
   */
  lubricant_type:
    | ("me-lube-oil" | "ae-lube-oil" | "cylinder-oil" | "high-bn-cylinder-oil" | "low-bn-cylinder-oil")
    | string;
  /**
   * The base number of the lubricant
   */
  base_number?: number;
  /**
   * The density of the lubricant (kg/m3)
   */
  density?: number;
  /**
   * The viscosity of the lubricant (cSt)
   */
  viscosity?: number;
  [k: string]: unknown;
}
export interface NoonReportStorageOther2 {
  tank_id: string;
  type:
    | ("fresh_water_distilled" | "fresh_water_drinking" | "fresh_water_cleaning" | "ballast_water" | "sludge" | "slops")
    | string;
  /**
   * Total amount entering the tank (generated or bunkered) (mt)
   */
  in?: number;
  /**
   * Total amount leaving the tank (consumed or discharged) (mt)
   */
  out?: number;
  /**
   * The amount remaining in the tank (mt)
   */
  remaining?: number;
  details?: NoonReportStorageOtherDetails2;
  [k: string]: unknown;
}
export interface NoonReportStorageOtherDetails2 {
  /**
   * The amount produced (mt)
   */
  produced?: number;
  /**
   * The amount consumed (mt)
   */
  consumed?: number;
  /**
   * The amount received (mt)
   */
  received?: number;
  /**
   * The amount discharged (mt)
   */
  discharged?: number;
  /**
   * The amount discharged (m3)
   */
  discharged_m3?: number;
  /**
   * The amount incinerated (mt)
   */
  incinerated?: number;
  /**
   * The amount incinerated (m3)
   */
  incinerated_m3?: number;
  /**
   * The temperature of the liquid (°C)
   */
  liquid_temperature?: number;
  [k: string]: unknown;
}
/**
 * List Operating condition of the vessel over the reporting period (used for regulatory reporting at port)
 */
export interface OperatingCondition2 {
  /**
   * Operating condition id
   */
  id: string;
  /**
   * The condition of the operating condition
   */
  condition?: string;
  /**
   * The duration of the operating condition (hours)
   */
  duration?: number;
  /**
   * The start datetime of the operating condition
   */
  period_start?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the operating condition
   */
  period_end?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface NoonReportMachinery2 {
  propellers: Propeller2[];
  main_engine: MainEngineMachinery2;
  auxiliary_engines: AuxiliaryEngineMachinery2;
  boilers: BoilerMachinery2;
  other_machinery: MachineryOtherMachinery2;
  sub_fuel_consumption_main_engines: SubFuelConsumptionMainEngine2[];
  sub_fuel_consumption_auxiliary_engines: SubFuelConsumptionAuxEngine2[];
  sub_fuel_consumption_boilers: SubFuelConsumptionBoiler2[];
}
export interface Propeller2 {
  /**
   * The id of the propeller
   */
  id: string;
  /**
   * Propeller distance (nm)
   */
  distance?: number;
  /**
   * Propeller slip (%)
   */
  slip?: number;
  [k: string]: unknown;
}
export interface MainEngineMachinery2 {
  equipments: MainEngine2[];
  /**
   * The SFOC of the Equipment (g/kWh)
   */
  specific_fuel_oil_consumption?: number;
  [k: string]: unknown;
}
export interface MainEngine2 {
  /**
   * The id of the main engine
   */
  id: string;
  /**
   * The name of the main engine
   */
  custom_name: string;
  /**
   * The canonical name of the main engine
   */
  canonical_reference: string;
  /**
   * The number of hours the main engine has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the main engine (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the main engine (kWh)
   */
  energy_consumed?: number;
  /**
   * The rpm of the main engine (rpm)
   */
  rpm?: number;
  /**
   * The load of the main engine (%)
   */
  load?: number;
  output_power?: MainEnginePower2;
  fuel_consumption?: FuelConsumption18[];
  [k: string]: unknown;
}
export interface MainEnginePower2 {
  /**
   * The power measured by the torsion meter (kW)
   */
  torsion_meter?: number;
  /**
   * Estimated power at main engine (kW)
   */
  main_engine?: number;
  [k: string]: unknown;
}
export interface FuelConsumption18 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption26[];
  operating_condition_consumptions?: OperatingConditionConsumption26[];
  [k: string]: unknown;
}
export interface ConditionalConsumption26 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption26 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface AuxiliaryEngineMachinery2 {
  equipments: AuxiliaryEngine2[];
  /**
   * The SFOC of the Equipment (g/kWh)
   */
  specific_fuel_oil_consumption?: number;
  total_fuel_consumption?: FuelConsumption20[];
  [k: string]: unknown;
}
export interface AuxiliaryEngine2 {
  /**
   * The id of the auxiliary engine
   */
  id: string;
  /**
   * The name of the auxiliary engine
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  /**
   * The number of hours the auxiliary engine has been running (hours)
   */
  running_hours?: number;
  /**
   * The rpm of the auxiliary engine (rpm)
   */
  rpm?: number;
  /**
   * The load of the auxiliary engine (%)
   */
  load?: number;
  fuel_consumption?: FuelConsumption19[];
  /**
   * The temperature of the auxiliary engine (°C)
   */
  temperature?: number;
  /**
   * The energy produced by the auxiliary engine (kWh)
   */
  energy_produced?: number;
  [k: string]: unknown;
}
export interface FuelConsumption19 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption27[];
  operating_condition_consumptions?: OperatingConditionConsumption27[];
  [k: string]: unknown;
}
export interface ConditionalConsumption27 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption27 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface FuelConsumption20 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption28[];
  operating_condition_consumptions?: OperatingConditionConsumption28[];
  [k: string]: unknown;
}
export interface ConditionalConsumption28 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption28 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface BoilerMachinery2 {
  equipments: Boiler2[];
  total_fuel_consumption?: FuelConsumption22[];
  [k: string]: unknown;
}
export interface Boiler2 {
  /**
   * The id of the boiler
   */
  id: string;
  /**
   * The name of the boiler
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  type:
    | (
        | "exhaust_gas_boiler"
        | "composite_boiler"
        | "auxiliary_boiler"
        | "electrical_boilers"
        | "thermal_boiler"
        | "main_boiler"
        | "regas_boiler"
      )
    | string;
  /**
   * The number of hours the boiler has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the boiler (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the boiler (kWh)
   */
  energy_consumed?: number;
  boiler_details?: BoilerDetails2;
  fuel_consumption?: FuelConsumption21[];
  [k: string]: unknown;
}
export interface BoilerDetails2 {
  /**
   * Exhaust temperature in (exhaust & composite boiler) (°C)
   */
  exhaust_temperature_in?: number;
  /**
   * Exhaust temperature out (exhaust & composite boiler) (°C)
   */
  exhaust_temperature_out?: number;
  [k: string]: unknown;
}
export interface FuelConsumption21 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption29[];
  operating_condition_consumptions?: OperatingConditionConsumption29[];
  [k: string]: unknown;
}
export interface ConditionalConsumption29 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption29 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface FuelConsumption22 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption30[];
  operating_condition_consumptions?: OperatingConditionConsumption30[];
  [k: string]: unknown;
}
export interface ConditionalConsumption30 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption30 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface MachineryOtherMachinery2 {
  equipments: MachineryOther2[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption32[];
    operating_condition_consumptions?: OperatingConditionConsumption32[];
    type: ("inert_gas_generation_system" | "incinerator" | "diesel_engine_power_packs") | string;
  }[];
  [k: string]: unknown;
}
export interface MachineryOther2 {
  /**
   * The id of the other machinery
   */
  id: string;
  /**
   * The name of the other machinery
   */
  custom_name: string;
  /**
   * The canonical name of the other machinery
   */
  canonical_reference: string;
  type: ("inert_gas_generation_system" | "incinerator" | "diesel_engine_power_packs") | string;
  /**
   * The number of hours the other machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the other machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the other machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption23[];
  [k: string]: unknown;
}
export interface FuelConsumption23 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption31[];
  operating_condition_consumptions?: OperatingConditionConsumption31[];
  [k: string]: unknown;
}
export interface ConditionalConsumption31 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption31 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption32 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption32 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface SubFuelConsumptionMainEngine2 {
  equipments: SubFuelConsumptionMachinery6[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption34[];
    operating_condition_consumptions?: OperatingConditionConsumption34[];
    type?: ("shaft_generator" | "pilot_fuel") | string;
  }[];
  [k: string]: unknown;
}
export interface SubFuelConsumptionMachinery6 {
  /**
   * The id of the sub fuel consumption machinery
   */
  id: string;
  /**
   * The name of the sub fuel consumption machinery
   */
  custom_name: string;
  /**
   * The canonical name of the sub fuel consumption machinery
   */
  canonical_reference: string;
  type:
    | (
        | "auxiliary_blowers"
        | "reliquefaction_systems"
        | "engine_room_fans"
        | "reefers"
        | "generator"
        | "ballast_transfer"
        | "burning_sludge"
        | "cargo_transfer"
        | "tank_cleaning"
        | "fresh_water_generation"
        | "inert_gas_generation"
        | "maintaining_cargo_temperature"
        | "raising_cargo_temperature"
        | "shaft_motor_propulsion"
        | "cargo_cooling_units"
        | "scrubbers_and_egc"
        | "cranes"
        | "other_electrical_consumers"
      )
    | string;
  /**
   * The number of hours the sub fuel consumption machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the sub fuel consumption machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the sub fuel consumption machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption24[];
  [k: string]: unknown;
}
export interface FuelConsumption24 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption33[];
  operating_condition_consumptions?: OperatingConditionConsumption33[];
  [k: string]: unknown;
}
export interface ConditionalConsumption33 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption33 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption34 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption34 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface SubFuelConsumptionAuxEngine2 {
  equipments: SubFuelConsumptionMachinery7[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption36[];
    operating_condition_consumptions?: OperatingConditionConsumption36[];
    type?:
      | (
          | "auxiliary_blowers"
          | "reliquefaction_systems"
          | "engine_room_fans"
          | "reefers"
          | "generator"
          | "ballast_transfer"
          | "burning_sludge"
          | "cargo_transfer"
          | "tank_cleaning"
          | "fresh_water_generation"
          | "inert_gas_generation"
          | "maintaining_cargo_temperature"
          | "raising_cargo_temperature"
          | "shaft_motor_propulsion"
          | "cargo_cooling_units"
          | "scrubbers_and_egc"
          | "cranes"
          | "other_electrical_consumers"
        )
      | string;
  }[];
  [k: string]: unknown;
}
export interface SubFuelConsumptionMachinery7 {
  /**
   * The id of the sub fuel consumption machinery
   */
  id: string;
  /**
   * The name of the sub fuel consumption machinery
   */
  custom_name: string;
  /**
   * The canonical name of the sub fuel consumption machinery
   */
  canonical_reference: string;
  type:
    | (
        | "auxiliary_blowers"
        | "reliquefaction_systems"
        | "engine_room_fans"
        | "reefers"
        | "generator"
        | "ballast_transfer"
        | "burning_sludge"
        | "cargo_transfer"
        | "tank_cleaning"
        | "fresh_water_generation"
        | "inert_gas_generation"
        | "maintaining_cargo_temperature"
        | "raising_cargo_temperature"
        | "shaft_motor_propulsion"
        | "cargo_cooling_units"
        | "scrubbers_and_egc"
        | "cranes"
        | "other_electrical_consumers"
      )
    | string;
  /**
   * The number of hours the sub fuel consumption machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the sub fuel consumption machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the sub fuel consumption machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption25[];
  [k: string]: unknown;
}
export interface FuelConsumption25 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption35[];
  operating_condition_consumptions?: OperatingConditionConsumption35[];
  [k: string]: unknown;
}
export interface ConditionalConsumption35 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption35 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption36 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption36 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface SubFuelConsumptionBoiler2 {
  equipments: SubFuelConsumptionMachinery8[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption38[];
    operating_condition_consumptions?: OperatingConditionConsumption38[];
    type?:
      | (
          | "auxiliary_blowers"
          | "reliquefaction_systems"
          | "engine_room_fans"
          | "reefers"
          | "generator"
          | "ballast_transfer"
          | "burning_sludge"
          | "cargo_transfer"
          | "tank_cleaning"
          | "fresh_water_generation"
          | "inert_gas_generation"
          | "maintaining_cargo_temperature"
          | "raising_cargo_temperature"
          | "shaft_motor_propulsion"
          | "cargo_cooling_units"
          | "scrubbers_and_egc"
          | "cranes"
          | "other_electrical_consumers"
        )
      | string;
  }[];
  [k: string]: unknown;
}
export interface SubFuelConsumptionMachinery8 {
  /**
   * The id of the sub fuel consumption machinery
   */
  id: string;
  /**
   * The name of the sub fuel consumption machinery
   */
  custom_name: string;
  /**
   * The canonical name of the sub fuel consumption machinery
   */
  canonical_reference: string;
  type:
    | (
        | "auxiliary_blowers"
        | "reliquefaction_systems"
        | "engine_room_fans"
        | "reefers"
        | "generator"
        | "ballast_transfer"
        | "burning_sludge"
        | "cargo_transfer"
        | "tank_cleaning"
        | "fresh_water_generation"
        | "inert_gas_generation"
        | "maintaining_cargo_temperature"
        | "raising_cargo_temperature"
        | "shaft_motor_propulsion"
        | "cargo_cooling_units"
        | "scrubbers_and_egc"
        | "cranes"
        | "other_electrical_consumers"
      )
    | string;
  /**
   * The number of hours the sub fuel consumption machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the sub fuel consumption machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the sub fuel consumption machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption26[];
  [k: string]: unknown;
}
export interface FuelConsumption26 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption37[];
  operating_condition_consumptions?: OperatingConditionConsumption37[];
  [k: string]: unknown;
}
export interface ConditionalConsumption37 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption37 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption38 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption38 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface NoonReportPort2 {
  port: Port5;
  port_purpose?:
    | ("loading" | "discharging" | "bunkering" | "awaiting_order" | "drifting" | "anchorage" | "ship_to_ship")
    | string;
  status?: ("origin" | "destination" | "current") | string;
  reference_points?: NoonReportPortReferencePoints2[];
}
export interface Port5 {
  /**
   * Port ID
   */
  id: string;
  /**
   * Port name
   */
  name: string;
  /**
   * Country code of the port
   */
  country_code: string;
  /**
   * UN/LOCODE of the port
   */
  unlocode?: string;
  /**
   * Is the port in port limits (regulation)
   */
  in_port_limits?: boolean;
  location: Location9;
  [k: string]: unknown;
}
export interface Location9 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface NoonReportPortReferencePoints2 {
  type?: ("pilot_station" | "end_of_sea_passage" | "commencement_of_sea_passage") | string;
  position?: Location10;
  /**
   * Expected time of arrival or departure at the reference point
   */
  time_of_arrival_or_departure_at_reference_point?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * Distance to the reference point (nm)
   */
  distance_to_reference_point?: number;
}
export interface Location10 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface Weather2 {
  air?: WeatherAir2;
  wind?: WeatherWind2;
  waves?: WeatherWaves2;
  swell?: WeatherSwell2;
  current?: Current2;
  sea_water?: WeatherSeaWater2;
  [k: string]: unknown;
}
export interface WeatherAir2 {
  /**
   * The temperature of the air (°C)
   */
  temperature?: number;
  /**
   * The pressure of the air (bars)
   */
  pressure?: number;
  /**
   * The humidity of the air (%)
   */
  humidity?: number;
  [k: string]: unknown;
}
export interface WeatherWind2 {
  /**
   * The speed of the wind (kn)
   */
  speed?: number;
  /**
   * The absolute direction of the wind (deg)
   */
  direction?: number;
  /**
   * Wind strength on the Beaufort scale, between 0 and 12
   */
  beaufort_number?: number;
  [k: string]: unknown;
}
export interface WeatherWaves2 {
  /**
   * The height of the waves (m)
   */
  height?: number;
  /**
   * The absolute direction of the waves (deg)
   */
  direction?: number;
  [k: string]: unknown;
}
export interface WeatherSwell2 {
  /**
   * The height of the swell (m)
   */
  height?: number;
  /**
   * The absolute direction of the swell (deg)
   */
  direction?: number;
  /**
   * The period of the swell (seconds)
   */
  period?: number;
  [k: string]: unknown;
}
export interface Current2 {
  /**
   * The speed of the current (kn)
   */
  speed?: number;
  /**
   * The absolute direction of the current (deg)
   */
  direction?: number;
  [k: string]: unknown;
}
export interface WeatherSeaWater2 {
  /**
   * The temperature of the sea water (°C)
   */
  temperature?: number;
  /**
   * The salinity of the sea water (%)
   */
  salinity?: number;
  [k: string]: unknown;
}
export interface NoonReportInstruction2 {
  type?:
    | (
        | "tank_pressure_at_arrival"
        | "tank_temperature_at_arrival"
        | "estimated_time_of_arrival"
        | "fixed_consumption"
        | "fixed_me_power"
        | "fixed_me_load"
        | "minimum_power"
        | "most_economical_speed"
        | "speed_over_ground"
        | "speed_through_water"
        | "fixed_me_rpm"
      )
    | string;
  /**
   * The person or company who gave the instruction
   */
  given_by?: string;
  instruction_details?: NoonReportInstructionDetails2;
  [k: string]: unknown;
}
export interface NoonReportInstructionDetails2 {
  tank_id?: string;
  /**
   * The datetime of the instruction
   */
  instruction_datetime?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * Value dependent on the instruction type
   */
  value?: number;
}
export interface NoonReportNavigation2 {
  position?: Location11;
  /**
   * Course of the vessel (deg)
   */
  course?: number;
  speed: NoonReportNavigationSpeed2;
  sailed_distance: NoonReportNavigationDistance2;
  draught?: NoonReportNavigationDraught2;
  /**
   * Difference between the average forward and aft draughts (m)
   */
  trim?: number;
  roll?: NoonReportNavigationRoll4;
  pitch?: NoonReportNavigationRoll5;
  loading_condition?: ("ballast" | "laden") | string;
  performance_codes?: {
    /**
     * Performance code
     */
    code: string;
    /**
     * Performance code label
     */
    label: string;
  }[];
  bad_weather?: NoonReportNavigationBadWeather2;
  sailed_in_ice?: NoonReportNavigationSailedInIce2;
}
export interface Location11 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface NoonReportNavigationSpeed2 {
  /**
   * Speed over ground (GPS) (kn)
   */
  observed: number;
  /**
   * Speed through water (kn)
   */
  logged?: number;
  /**
   * Impact due to current (kn)
   */
  impact_due_to_current?: number;
}
export interface NoonReportNavigationDistance2 {
  /**
   * Distance over ground (GPS) (nm)
   */
  observed: number;
  /**
   * Distance through water (nm)
   */
  logged?: number;
}
export interface NoonReportNavigationDraught2 {
  fore?: NoonReportNavigationDraughtItem6;
  mid?: NoonReportNavigationDraughtItem7;
  aft?: NoonReportNavigationDraughtItem8;
}
export interface NoonReportNavigationDraughtItem6 {
  /**
   * Starboard draught (m)
   */
  starboard?: number;
  /**
   * Port draught (m)
   */
  port?: number;
  /**
   * Average draught (m)
   */
  average?: number;
}
export interface NoonReportNavigationDraughtItem7 {
  /**
   * Starboard draught (m)
   */
  starboard?: number;
  /**
   * Port draught (m)
   */
  port?: number;
  /**
   * Average draught (m)
   */
  average?: number;
}
export interface NoonReportNavigationDraughtItem8 {
  /**
   * Starboard draught (m)
   */
  starboard?: number;
  /**
   * Port draught (m)
   */
  port?: number;
  /**
   * Average draught (m)
   */
  average?: number;
}
export interface NoonReportNavigationRoll4 {
  /**
   * Max roll angle (deg)
   */
  max?: number;
  /**
   * Average roll angle (deg)
   */
  average?: number;
}
export interface NoonReportNavigationRoll5 {
  /**
   * Max roll angle (deg)
   */
  max?: number;
  /**
   * Average roll angle (deg)
   */
  average?: number;
}
export interface NoonReportNavigationBadWeather2 {
  /**
   * Distance sailed in bad weather (nm)
   */
  distance_sailed_in_bad_weather?: number;
  /**
   * Duration of bad weather (hours)
   */
  duration_of_bad_weather?: number;
}
export interface NoonReportNavigationSailedInIce2 {
  /**
   * Water covered in ice
   */
  water_covered_in_ice?: boolean;
  /**
   * Distance sailed in ice (nm)
   */
  distance_sailed_in_ice?: number;
  /**
   * Duration sailed in ice (hours)
   */
  duration_sailed_in_ice?: number;
}
export interface NoonReport3 {
  /**
   * The type of event that occurred
   */
  type: ("at_sea" | "in_port" | "arrival" | "departure") | string;
  /**
   * The name of the captain
   */
  captain_name?: string;
  /**
   * The name of the chief engineer
   */
  chief_engineer_name?: string;
  storage: NoonReportStorage3;
  operating_conditions: OperatingCondition3[];
  machinery: NoonReportMachinery3;
  ports: NoonReportPort3[];
  weather?: Weather3;
  instructions: NoonReportInstruction3[];
  navigation: NoonReportNavigation3;
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The start datetime of the event
   */
  period_start: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the event
   */
  period_end: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The duration of the event (hours)
   */
  duration?: number;
  /**
   * The voyage number, as reported by the captain. May contain non-numeric characters.
   */
  voyage_number?: string;
  /**
   * Multiline comment
   */
  comment?: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface NoonReportStorage3 {
  bunkers: NoonReportStorageBunker3[];
  cargos: NoonReportStorageCargo3[];
  lubricants: NoonReportStorageLubricants3[];
  other_stores: NoonReportStorageOther3[];
  [k: string]: unknown;
}
export interface NoonReportStorageBunker3 {
  /**
   * The id of the bunker
   */
  id: string;
  tank?: Tank15;
  bunker: Bunker6;
  /**
   * The amount of bunker remaining (mt)
   */
  remaining?: number;
  [k: string]: unknown;
}
export interface Tank15 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Bunker6 {
  /**
   * Fuel grade
   */
  fuel_grade: ("hsfo" | "vlsfo" | "mgo" | "lng") | string;
  details?: BunkerDetails6;
  [k: string]: unknown;
}
/**
 * Details of the fuel grade, properties based on type
 */
export interface BunkerDetails6 {
  /**
   * %
   */
  sulphur?: number;
  /**
   * kg/m3
   */
  density?: number;
  /**
   * cSt
   */
  viscosity?: number;
  /**
   * Lower calorific value (MJ/kg)
   */
  lower_calorific_value?: number;
  /**
   * Percentage of biofuel (%)
   */
  percentage_of_bio?: number;
  /**
   * CO2 conversion factor (kg CO2/kg fuel)
   */
  co2_conversion_factor?: number;
  /**
   * Temperature of the flash point (°C)
   */
  flash_point?: number;
  /**
   * Deep tank ROB (mt)
   */
  deepTankROB?: number;
  /**
   * Settling tank ROB (mt)
   */
  settlingTankROB?: number;
  /**
   * Service tank ROB (mt)
   */
  serviceTankROB?: number;
  /**
   * Overflow tank ROB (mt)
   */
  overflowTankROB?: number;
  origin?: BunkerDetailsOrigin6;
  [k: string]: unknown;
}
export interface BunkerDetailsOrigin6 {
  /**
   * Unique batch ID
   */
  batch_id?: string;
  /**
   * Provider of the fuel
   */
  provider?: string;
  [k: string]: unknown;
}
export interface NoonReportStorageCargo3 {
  tank?: Tank16;
  cargo?: Cargo6;
  /**
   * The weight of the cargo (mt)
   */
  cargo_weight?: number;
  cargo_details?: NoonReportStorageCargoDetails3;
  [k: string]: unknown;
}
export interface Tank16 {
  /**
   * Tank ID
   */
  id: string;
  /**
   * Tank name
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  [k: string]: unknown;
}
export interface Cargo6 {
  /**
   * unique Id to be able to follow cargo
   */
  id: string;
  /**
   * Name of the cargo
   */
  name?: string;
  /**
   * Type of the cargo
   */
  type?: ("crude_oil" | "lng" | "lpg" | "chemicals" | "dry_bulk" | "container") | string;
  characteristics?: CargoCharacteristics6;
  [k: string]: unknown;
}
export interface CargoCharacteristics6 {
  /**
   * Grade of the cargo
   */
  grade?: string;
  /**
   * Density of the cargo (kg/m3)
   */
  density?: number;
  /**
   * Viscosity of the cargo (cSt)
   */
  viscosity?: number;
  /**
   * Does the cargo require to be heated or not
   */
  heated_cargo?: boolean;
  [k: string]: unknown;
}
export interface NoonReportStorageCargoDetails3 {
  /**
   * The vapor pressure of the cargo (mmWG)
   */
  vapor_pressure?: number;
  /**
   * The temperature of the cargo (°C)
   */
  liquid_temperature?: number;
  [k: string]: unknown;
}
export interface NoonReportStorageLubricants3 {
  tank_id: string;
  lubricant_grade?: Lubricant6;
  /**
   * The amount of lubricant consumed (L)
   */
  consumed?: number;
  /**
   * The amount of lubricant remaining (L)
   */
  remaining?: number;
  [k: string]: unknown;
}
export interface Lubricant6 {
  /**
   * The type of lubricant
   */
  lubricant_type:
    | ("me-lube-oil" | "ae-lube-oil" | "cylinder-oil" | "high-bn-cylinder-oil" | "low-bn-cylinder-oil")
    | string;
  /**
   * The base number of the lubricant
   */
  base_number?: number;
  /**
   * The density of the lubricant (kg/m3)
   */
  density?: number;
  /**
   * The viscosity of the lubricant (cSt)
   */
  viscosity?: number;
  [k: string]: unknown;
}
export interface NoonReportStorageOther3 {
  tank_id: string;
  type:
    | ("fresh_water_distilled" | "fresh_water_drinking" | "fresh_water_cleaning" | "ballast_water" | "sludge" | "slops")
    | string;
  /**
   * Total amount entering the tank (generated or bunkered) (mt)
   */
  in?: number;
  /**
   * Total amount leaving the tank (consumed or discharged) (mt)
   */
  out?: number;
  /**
   * The amount remaining in the tank (mt)
   */
  remaining?: number;
  details?: NoonReportStorageOtherDetails3;
  [k: string]: unknown;
}
export interface NoonReportStorageOtherDetails3 {
  /**
   * The amount produced (mt)
   */
  produced?: number;
  /**
   * The amount consumed (mt)
   */
  consumed?: number;
  /**
   * The amount received (mt)
   */
  received?: number;
  /**
   * The amount discharged (mt)
   */
  discharged?: number;
  /**
   * The amount discharged (m3)
   */
  discharged_m3?: number;
  /**
   * The amount incinerated (mt)
   */
  incinerated?: number;
  /**
   * The amount incinerated (m3)
   */
  incinerated_m3?: number;
  /**
   * The temperature of the liquid (°C)
   */
  liquid_temperature?: number;
  [k: string]: unknown;
}
/**
 * List Operating condition of the vessel over the reporting period (used for regulatory reporting at port)
 */
export interface OperatingCondition3 {
  /**
   * Operating condition id
   */
  id: string;
  /**
   * The condition of the operating condition
   */
  condition?: string;
  /**
   * The duration of the operating condition (hours)
   */
  duration?: number;
  /**
   * The start datetime of the operating condition
   */
  period_start?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * The end datetime of the operating condition
   */
  period_end?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface NoonReportMachinery3 {
  propellers: Propeller3[];
  main_engine: MainEngineMachinery3;
  auxiliary_engines: AuxiliaryEngineMachinery3;
  boilers: BoilerMachinery3;
  other_machinery: MachineryOtherMachinery3;
  sub_fuel_consumption_main_engines: SubFuelConsumptionMainEngine3[];
  sub_fuel_consumption_auxiliary_engines: SubFuelConsumptionAuxEngine3[];
  sub_fuel_consumption_boilers: SubFuelConsumptionBoiler3[];
}
export interface Propeller3 {
  /**
   * The id of the propeller
   */
  id: string;
  /**
   * Propeller distance (nm)
   */
  distance?: number;
  /**
   * Propeller slip (%)
   */
  slip?: number;
  [k: string]: unknown;
}
export interface MainEngineMachinery3 {
  equipments: MainEngine3[];
  /**
   * The SFOC of the Equipment (g/kWh)
   */
  specific_fuel_oil_consumption?: number;
  [k: string]: unknown;
}
export interface MainEngine3 {
  /**
   * The id of the main engine
   */
  id: string;
  /**
   * The name of the main engine
   */
  custom_name: string;
  /**
   * The canonical name of the main engine
   */
  canonical_reference: string;
  /**
   * The number of hours the main engine has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the main engine (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the main engine (kWh)
   */
  energy_consumed?: number;
  /**
   * The rpm of the main engine (rpm)
   */
  rpm?: number;
  /**
   * The load of the main engine (%)
   */
  load?: number;
  output_power?: MainEnginePower3;
  fuel_consumption?: FuelConsumption27[];
  [k: string]: unknown;
}
export interface MainEnginePower3 {
  /**
   * The power measured by the torsion meter (kW)
   */
  torsion_meter?: number;
  /**
   * Estimated power at main engine (kW)
   */
  main_engine?: number;
  [k: string]: unknown;
}
export interface FuelConsumption27 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption39[];
  operating_condition_consumptions?: OperatingConditionConsumption39[];
  [k: string]: unknown;
}
export interface ConditionalConsumption39 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption39 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface AuxiliaryEngineMachinery3 {
  equipments: AuxiliaryEngine3[];
  /**
   * The SFOC of the Equipment (g/kWh)
   */
  specific_fuel_oil_consumption?: number;
  total_fuel_consumption?: FuelConsumption29[];
  [k: string]: unknown;
}
export interface AuxiliaryEngine3 {
  /**
   * The id of the auxiliary engine
   */
  id: string;
  /**
   * The name of the auxiliary engine
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  /**
   * The number of hours the auxiliary engine has been running (hours)
   */
  running_hours?: number;
  /**
   * The rpm of the auxiliary engine (rpm)
   */
  rpm?: number;
  /**
   * The load of the auxiliary engine (%)
   */
  load?: number;
  fuel_consumption?: FuelConsumption28[];
  /**
   * The temperature of the auxiliary engine (°C)
   */
  temperature?: number;
  /**
   * The energy produced by the auxiliary engine (kWh)
   */
  energy_produced?: number;
  [k: string]: unknown;
}
export interface FuelConsumption28 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption40[];
  operating_condition_consumptions?: OperatingConditionConsumption40[];
  [k: string]: unknown;
}
export interface ConditionalConsumption40 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption40 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface FuelConsumption29 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption41[];
  operating_condition_consumptions?: OperatingConditionConsumption41[];
  [k: string]: unknown;
}
export interface ConditionalConsumption41 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption41 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface BoilerMachinery3 {
  equipments: Boiler3[];
  total_fuel_consumption?: FuelConsumption31[];
  [k: string]: unknown;
}
export interface Boiler3 {
  /**
   * The id of the boiler
   */
  id: string;
  /**
   * The name of the boiler
   */
  custom_name: string;
  /**
   * Tank name
   */
  canonical_reference: string;
  type:
    | (
        | "exhaust_gas_boiler"
        | "composite_boiler"
        | "auxiliary_boiler"
        | "electrical_boilers"
        | "thermal_boiler"
        | "main_boiler"
        | "regas_boiler"
      )
    | string;
  /**
   * The number of hours the boiler has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the boiler (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the boiler (kWh)
   */
  energy_consumed?: number;
  boiler_details?: BoilerDetails3;
  fuel_consumption?: FuelConsumption30[];
  [k: string]: unknown;
}
export interface BoilerDetails3 {
  /**
   * Exhaust temperature in (exhaust & composite boiler) (°C)
   */
  exhaust_temperature_in?: number;
  /**
   * Exhaust temperature out (exhaust & composite boiler) (°C)
   */
  exhaust_temperature_out?: number;
  [k: string]: unknown;
}
export interface FuelConsumption30 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption42[];
  operating_condition_consumptions?: OperatingConditionConsumption42[];
  [k: string]: unknown;
}
export interface ConditionalConsumption42 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption42 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface FuelConsumption31 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption43[];
  operating_condition_consumptions?: OperatingConditionConsumption43[];
  [k: string]: unknown;
}
export interface ConditionalConsumption43 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption43 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface MachineryOtherMachinery3 {
  equipments: MachineryOther3[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption45[];
    operating_condition_consumptions?: OperatingConditionConsumption45[];
    type: ("inert_gas_generation_system" | "incinerator" | "diesel_engine_power_packs") | string;
  }[];
  [k: string]: unknown;
}
export interface MachineryOther3 {
  /**
   * The id of the other machinery
   */
  id: string;
  /**
   * The name of the other machinery
   */
  custom_name: string;
  /**
   * The canonical name of the other machinery
   */
  canonical_reference: string;
  type: ("inert_gas_generation_system" | "incinerator" | "diesel_engine_power_packs") | string;
  /**
   * The number of hours the other machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the other machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the other machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption32[];
  [k: string]: unknown;
}
export interface FuelConsumption32 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption44[];
  operating_condition_consumptions?: OperatingConditionConsumption44[];
  [k: string]: unknown;
}
export interface ConditionalConsumption44 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption44 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption45 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption45 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface SubFuelConsumptionMainEngine3 {
  equipments: SubFuelConsumptionMachinery9[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption47[];
    operating_condition_consumptions?: OperatingConditionConsumption47[];
    type?: ("shaft_generator" | "pilot_fuel") | string;
  }[];
  [k: string]: unknown;
}
export interface SubFuelConsumptionMachinery9 {
  /**
   * The id of the sub fuel consumption machinery
   */
  id: string;
  /**
   * The name of the sub fuel consumption machinery
   */
  custom_name: string;
  /**
   * The canonical name of the sub fuel consumption machinery
   */
  canonical_reference: string;
  type:
    | (
        | "auxiliary_blowers"
        | "reliquefaction_systems"
        | "engine_room_fans"
        | "reefers"
        | "generator"
        | "ballast_transfer"
        | "burning_sludge"
        | "cargo_transfer"
        | "tank_cleaning"
        | "fresh_water_generation"
        | "inert_gas_generation"
        | "maintaining_cargo_temperature"
        | "raising_cargo_temperature"
        | "shaft_motor_propulsion"
        | "cargo_cooling_units"
        | "scrubbers_and_egc"
        | "cranes"
        | "other_electrical_consumers"
      )
    | string;
  /**
   * The number of hours the sub fuel consumption machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the sub fuel consumption machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the sub fuel consumption machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption33[];
  [k: string]: unknown;
}
export interface FuelConsumption33 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption46[];
  operating_condition_consumptions?: OperatingConditionConsumption46[];
  [k: string]: unknown;
}
export interface ConditionalConsumption46 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption46 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption47 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption47 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface SubFuelConsumptionAuxEngine3 {
  equipments: SubFuelConsumptionMachinery10[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption49[];
    operating_condition_consumptions?: OperatingConditionConsumption49[];
    type?:
      | (
          | "auxiliary_blowers"
          | "reliquefaction_systems"
          | "engine_room_fans"
          | "reefers"
          | "generator"
          | "ballast_transfer"
          | "burning_sludge"
          | "cargo_transfer"
          | "tank_cleaning"
          | "fresh_water_generation"
          | "inert_gas_generation"
          | "maintaining_cargo_temperature"
          | "raising_cargo_temperature"
          | "shaft_motor_propulsion"
          | "cargo_cooling_units"
          | "scrubbers_and_egc"
          | "cranes"
          | "other_electrical_consumers"
        )
      | string;
  }[];
  [k: string]: unknown;
}
export interface SubFuelConsumptionMachinery10 {
  /**
   * The id of the sub fuel consumption machinery
   */
  id: string;
  /**
   * The name of the sub fuel consumption machinery
   */
  custom_name: string;
  /**
   * The canonical name of the sub fuel consumption machinery
   */
  canonical_reference: string;
  type:
    | (
        | "auxiliary_blowers"
        | "reliquefaction_systems"
        | "engine_room_fans"
        | "reefers"
        | "generator"
        | "ballast_transfer"
        | "burning_sludge"
        | "cargo_transfer"
        | "tank_cleaning"
        | "fresh_water_generation"
        | "inert_gas_generation"
        | "maintaining_cargo_temperature"
        | "raising_cargo_temperature"
        | "shaft_motor_propulsion"
        | "cargo_cooling_units"
        | "scrubbers_and_egc"
        | "cranes"
        | "other_electrical_consumers"
      )
    | string;
  /**
   * The number of hours the sub fuel consumption machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the sub fuel consumption machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the sub fuel consumption machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption34[];
  [k: string]: unknown;
}
export interface FuelConsumption34 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption48[];
  operating_condition_consumptions?: OperatingConditionConsumption48[];
  [k: string]: unknown;
}
export interface ConditionalConsumption48 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption48 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption49 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption49 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface SubFuelConsumptionBoiler3 {
  equipments: SubFuelConsumptionMachinery11[];
  total_fuel_consumption?: {
    /**
     * Id of the bunker storage where the fuel was consumed
     */
    bunker_storage_id: string;
    /**
     * The amount of fuel consumed (mt)
     */
    consumed: number;
    conditional_consumptions?: ConditionalConsumption51[];
    operating_condition_consumptions?: OperatingConditionConsumption51[];
    type?:
      | (
          | "auxiliary_blowers"
          | "reliquefaction_systems"
          | "engine_room_fans"
          | "reefers"
          | "generator"
          | "ballast_transfer"
          | "burning_sludge"
          | "cargo_transfer"
          | "tank_cleaning"
          | "fresh_water_generation"
          | "inert_gas_generation"
          | "maintaining_cargo_temperature"
          | "raising_cargo_temperature"
          | "shaft_motor_propulsion"
          | "cargo_cooling_units"
          | "scrubbers_and_egc"
          | "cranes"
          | "other_electrical_consumers"
        )
      | string;
  }[];
  [k: string]: unknown;
}
export interface SubFuelConsumptionMachinery11 {
  /**
   * The id of the sub fuel consumption machinery
   */
  id: string;
  /**
   * The name of the sub fuel consumption machinery
   */
  custom_name: string;
  /**
   * The canonical name of the sub fuel consumption machinery
   */
  canonical_reference: string;
  type:
    | (
        | "auxiliary_blowers"
        | "reliquefaction_systems"
        | "engine_room_fans"
        | "reefers"
        | "generator"
        | "ballast_transfer"
        | "burning_sludge"
        | "cargo_transfer"
        | "tank_cleaning"
        | "fresh_water_generation"
        | "inert_gas_generation"
        | "maintaining_cargo_temperature"
        | "raising_cargo_temperature"
        | "shaft_motor_propulsion"
        | "cargo_cooling_units"
        | "scrubbers_and_egc"
        | "cranes"
        | "other_electrical_consumers"
      )
    | string;
  /**
   * The number of hours the sub fuel consumption machinery has been running (hours)
   */
  running_hours?: number;
  /**
   * The energy produced by the sub fuel consumption machinery (kWh)
   */
  energy_produced?: number;
  /**
   * The energy consumed by the sub fuel consumption machinery (kWh)
   */
  energy_consumed?: number;
  fuel_consumption?: FuelConsumption35[];
  [k: string]: unknown;
}
export interface FuelConsumption35 {
  /**
   * Id of the bunker storage where the fuel was consumed
   */
  bunker_storage_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  conditional_consumptions?: ConditionalConsumption50[];
  operating_condition_consumptions?: OperatingConditionConsumption50[];
  [k: string]: unknown;
}
export interface ConditionalConsumption50 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption50 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface ConditionalConsumption51 {
  type?: ("bad-weather" | "ice") | string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface OperatingConditionConsumption51 {
  /**
   * Operating condition id
   */
  operating_condition_id: string;
  /**
   * The amount of fuel consumed (mt)
   */
  consumed: number;
  [k: string]: unknown;
}
export interface NoonReportPort3 {
  port: Port6;
  port_purpose?:
    | ("loading" | "discharging" | "bunkering" | "awaiting_order" | "drifting" | "anchorage" | "ship_to_ship")
    | string;
  status?: ("origin" | "destination" | "current") | string;
  reference_points?: NoonReportPortReferencePoints3[];
}
export interface Port6 {
  /**
   * Port ID
   */
  id: string;
  /**
   * Port name
   */
  name: string;
  /**
   * Country code of the port
   */
  country_code: string;
  /**
   * UN/LOCODE of the port
   */
  unlocode?: string;
  /**
   * Is the port in port limits (regulation)
   */
  in_port_limits?: boolean;
  location: Location12;
  [k: string]: unknown;
}
export interface Location12 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface NoonReportPortReferencePoints3 {
  type?: ("pilot_station" | "end_of_sea_passage" | "commencement_of_sea_passage") | string;
  position?: Location13;
  /**
   * Expected time of arrival or departure at the reference point
   */
  time_of_arrival_or_departure_at_reference_point?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * Distance to the reference point (nm)
   */
  distance_to_reference_point?: number;
}
export interface Location13 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface Weather3 {
  air?: WeatherAir3;
  wind?: WeatherWind3;
  waves?: WeatherWaves3;
  swell?: WeatherSwell3;
  current?: Current3;
  sea_water?: WeatherSeaWater3;
  [k: string]: unknown;
}
export interface WeatherAir3 {
  /**
   * The temperature of the air (°C)
   */
  temperature?: number;
  /**
   * The pressure of the air (bars)
   */
  pressure?: number;
  /**
   * The humidity of the air (%)
   */
  humidity?: number;
  [k: string]: unknown;
}
export interface WeatherWind3 {
  /**
   * The speed of the wind (kn)
   */
  speed?: number;
  /**
   * The absolute direction of the wind (deg)
   */
  direction?: number;
  /**
   * Wind strength on the Beaufort scale, between 0 and 12
   */
  beaufort_number?: number;
  [k: string]: unknown;
}
export interface WeatherWaves3 {
  /**
   * The height of the waves (m)
   */
  height?: number;
  /**
   * The absolute direction of the waves (deg)
   */
  direction?: number;
  [k: string]: unknown;
}
export interface WeatherSwell3 {
  /**
   * The height of the swell (m)
   */
  height?: number;
  /**
   * The absolute direction of the swell (deg)
   */
  direction?: number;
  /**
   * The period of the swell (seconds)
   */
  period?: number;
  [k: string]: unknown;
}
export interface Current3 {
  /**
   * The speed of the current (kn)
   */
  speed?: number;
  /**
   * The absolute direction of the current (deg)
   */
  direction?: number;
  [k: string]: unknown;
}
export interface WeatherSeaWater3 {
  /**
   * The temperature of the sea water (°C)
   */
  temperature?: number;
  /**
   * The salinity of the sea water (%)
   */
  salinity?: number;
  [k: string]: unknown;
}
export interface NoonReportInstruction3 {
  type?:
    | (
        | "tank_pressure_at_arrival"
        | "tank_temperature_at_arrival"
        | "estimated_time_of_arrival"
        | "fixed_consumption"
        | "fixed_me_power"
        | "fixed_me_load"
        | "minimum_power"
        | "most_economical_speed"
        | "speed_over_ground"
        | "speed_through_water"
        | "fixed_me_rpm"
      )
    | string;
  /**
   * The person or company who gave the instruction
   */
  given_by?: string;
  instruction_details?: NoonReportInstructionDetails3;
  [k: string]: unknown;
}
export interface NoonReportInstructionDetails3 {
  tank_id?: string;
  /**
   * The datetime of the instruction
   */
  instruction_datetime?: {
    /**
     * UTC time in RFC3339 format
     */
    universal_datetime: string;
    /**
     * Time zone offset in hours
     */
    time_zone_offset?: number;
    [k: string]: unknown;
  };
  /**
   * Value dependent on the instruction type
   */
  value?: number;
}
export interface NoonReportNavigation3 {
  position?: Location14;
  /**
   * Course of the vessel (deg)
   */
  course?: number;
  speed: NoonReportNavigationSpeed3;
  sailed_distance: NoonReportNavigationDistance3;
  draught?: NoonReportNavigationDraught3;
  /**
   * Difference between the average forward and aft draughts (m)
   */
  trim?: number;
  roll?: NoonReportNavigationRoll6;
  pitch?: NoonReportNavigationRoll7;
  loading_condition?: ("ballast" | "laden") | string;
  performance_codes?: {
    /**
     * Performance code
     */
    code: string;
    /**
     * Performance code label
     */
    label: string;
  }[];
  bad_weather?: NoonReportNavigationBadWeather3;
  sailed_in_ice?: NoonReportNavigationSailedInIce3;
}
export interface Location14 {
  /**
   * Latitude (unit: degrees north)
   */
  latitude: number;
  /**
   * Longitude (unit: degrees east)
   */
  longitude: number;
  [k: string]: unknown;
}
export interface NoonReportNavigationSpeed3 {
  /**
   * Speed over ground (GPS) (kn)
   */
  observed: number;
  /**
   * Speed through water (kn)
   */
  logged?: number;
  /**
   * Impact due to current (kn)
   */
  impact_due_to_current?: number;
}
export interface NoonReportNavigationDistance3 {
  /**
   * Distance over ground (GPS) (nm)
   */
  observed: number;
  /**
   * Distance through water (nm)
   */
  logged?: number;
}
export interface NoonReportNavigationDraught3 {
  fore?: NoonReportNavigationDraughtItem9;
  mid?: NoonReportNavigationDraughtItem10;
  aft?: NoonReportNavigationDraughtItem11;
}
export interface NoonReportNavigationDraughtItem9 {
  /**
   * Starboard draught (m)
   */
  starboard?: number;
  /**
   * Port draught (m)
   */
  port?: number;
  /**
   * Average draught (m)
   */
  average?: number;
}
export interface NoonReportNavigationDraughtItem10 {
  /**
   * Starboard draught (m)
   */
  starboard?: number;
  /**
   * Port draught (m)
   */
  port?: number;
  /**
   * Average draught (m)
   */
  average?: number;
}
export interface NoonReportNavigationDraughtItem11 {
  /**
   * Starboard draught (m)
   */
  starboard?: number;
  /**
   * Port draught (m)
   */
  port?: number;
  /**
   * Average draught (m)
   */
  average?: number;
}
export interface NoonReportNavigationRoll6 {
  /**
   * Max roll angle (deg)
   */
  max?: number;
  /**
   * Average roll angle (deg)
   */
  average?: number;
}
export interface NoonReportNavigationRoll7 {
  /**
   * Max roll angle (deg)
   */
  max?: number;
  /**
   * Average roll angle (deg)
   */
  average?: number;
}
export interface NoonReportNavigationBadWeather3 {
  /**
   * Distance sailed in bad weather (nm)
   */
  distance_sailed_in_bad_weather?: number;
  /**
   * Duration of bad weather (hours)
   */
  duration_of_bad_weather?: number;
}
export interface NoonReportNavigationSailedInIce3 {
  /**
   * Water covered in ice
   */
  water_covered_in_ice?: boolean;
  /**
   * Distance sailed in ice (nm)
   */
  distance_sailed_in_ice?: number;
  /**
   * Duration sailed in ice (hours)
   */
  duration_sailed_in_ice?: number;
}
export interface HistoricalReport {
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface HistoricalReport1 {
  /**
   * The IMO of the vessel
   */
  imo: number;
  /**
   * The id of the report
   */
  id: string;
  /**
   * The data source
   */
  data_source?: string;
  /**
   * Revision time of the report
   */
  revision: string;
  /**
   * The datetime of the last update
   */
  updated_at: string;
  /**
   * The datetime of deletion
   */
  deleted_at?: string;
  [k: string]: unknown;
}
export interface ReportingVessel {
  imo: number;
  report_counts: {
    noonReport?: {
      count: number;
      from: string;
      to: string;
    };
    bunkerEvent?: {
      count: number;
      from: string;
      to: string;
    };
    cargoEvent?: {
      count: number;
      from: string;
      to: string;
    };
    hullEvent?: {
      count: number;
      from: string;
      to: string;
    };
    statementOfFacts?: {
      count: number;
      from: string;
      to: string;
    };
    nonCompliant?: {
      count: number;
      from: string;
      to: string;
    };
  };
  [k: string]: unknown;
}
